{"version":3,"file":"trackStatsReporter.js","names":["_statsValueFormatter","require","TrackStatsReporter","buildFramerateResolution","trackStats","now","resolution","height","frameHeight","width","frameWidth","frameRate","framesPerSecond","setResolution","setFramerate","Math","round","calculateSimulcastFramerate","before","layer","getFramerate","timeMs","timestamp","framesSent","numberOfFramesSinceBefore","buildCodec","report","codec","get","codecId","codecShortType","mimeType","split","setCodec","buildBitrateReceived","setBitrate","download","calculateBitrate","bytesReceived","upload","buildBitrateSend","bytesSent","buildPacketsLost","key","type","packetsNow","packetsBefore","StatsValueFormatter","getNonNegativeValue","packetsDiff","max","packetsLostNow","packetsLost","packetsLostBefore","packetsLostDiff","setLoss","packetsTotal","isDownloadStream","bytesNowAny","bytesBeforeAny","nowTimestamp","beforeTimestamp","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","setTrackStatsState","transceiver","_transceiver$sender","undefined","alive","track","getType","receiver","sender","readyState","muted","enabled","buildTrackSummary","trackStatsList","audioTrackSummary","count","videoTrackSummary","filter","t","forEach","stats","trackSummary","kind","buildJitter","statsReport","jitterStr","jitter","setJitter","exports"],"sources":["../../../src/webrtc/stats/trackStatsReporter.ts"],"sourcesContent":["import { MediaTrackStats } from \"./media/mediaTrackStats\";\nimport { StatsValueFormatter } from \"./statsValueFormatter\";\nimport { TrackSummary } from \"./summaryStats\";\n\nexport class TrackStatsReporter {\n    public static buildFramerateResolution(trackStats: MediaTrackStats, now: any): void {\n        const resolution = {\n            height: now.frameHeight,\n            width: now.frameWidth,\n        };\n        const frameRate = now.framesPerSecond;\n\n        if (resolution.height && resolution.width) {\n            trackStats.setResolution(resolution);\n        }\n        trackStats.setFramerate(Math.round(frameRate || 0));\n    }\n\n    public static calculateSimulcastFramerate(trackStats: MediaTrackStats, now: any, before: any, layer: number): void {\n        let frameRate = trackStats.getFramerate();\n        if (!frameRate) {\n            if (before) {\n                const timeMs = now.timestamp - before.timestamp;\n\n                if (timeMs > 0 && now.framesSent) {\n                    const numberOfFramesSinceBefore = now.framesSent - before.framesSent;\n\n                    frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                }\n            }\n\n            if (!frameRate) {\n                return;\n            }\n        }\n\n        // Reset frame rate to 0 when video is suspended as a result of endpoint falling out of last-n.\n        frameRate = layer ? Math.round(frameRate / layer) : 0;\n        trackStats.setFramerate(frameRate);\n    }\n\n    public static buildCodec(report: RTCStatsReport | undefined, trackStats: MediaTrackStats, now: any): void {\n        const codec = report?.get(now.codecId);\n\n        if (codec) {\n            /**\n             * The mime type has the following form: video/VP8 or audio/ISAC,\n             * so we what to keep just the type after the '/', audio and video\n             * keys will be added on the processing side.\n             */\n            const codecShortType = codec.mimeType.split(\"/\")[1];\n\n            codecShortType && trackStats.setCodec(codecShortType);\n        }\n    }\n\n    public static buildBitrateReceived(trackStats: MediaTrackStats, now: any, before: any): void {\n        trackStats.setBitrate({\n            download: TrackStatsReporter.calculateBitrate(\n                now.bytesReceived,\n                before.bytesReceived,\n                now.timestamp,\n                before.timestamp,\n            ),\n            upload: 0,\n        });\n    }\n\n    public static buildBitrateSend(trackStats: MediaTrackStats, now: any, before: any): void {\n        trackStats.setBitrate({\n            download: 0,\n            upload: this.calculateBitrate(now.bytesSent, before.bytesSent, now.timestamp, before.timestamp),\n        });\n    }\n\n    public static buildPacketsLost(trackStats: MediaTrackStats, now: any, before: any): void {\n        const key = now.type === \"outbound-rtp\" ? \"packetsSent\" : \"packetsReceived\";\n\n        let packetsNow = now[key];\n        if (!packetsNow || packetsNow < 0) {\n            packetsNow = 0;\n        }\n\n        const packetsBefore = StatsValueFormatter.getNonNegativeValue(before[key]);\n        const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n        const packetsLostNow = StatsValueFormatter.getNonNegativeValue(now.packetsLost);\n        const packetsLostBefore = StatsValueFormatter.getNonNegativeValue(before.packetsLost);\n        const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n        trackStats.setLoss({\n            packetsTotal: packetsDiff + packetsLostDiff,\n            packetsLost: packetsLostDiff,\n            isDownloadStream: now.type !== \"outbound-rtp\",\n        });\n    }\n\n    private static calculateBitrate(\n        bytesNowAny: any,\n        bytesBeforeAny: any,\n        nowTimestamp: number,\n        beforeTimestamp: number,\n    ): number {\n        const bytesNow = StatsValueFormatter.getNonNegativeValue(bytesNowAny);\n        const bytesBefore = StatsValueFormatter.getNonNegativeValue(bytesBeforeAny);\n        const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n        const timeMs = nowTimestamp - beforeTimestamp;\n        let bitrateKbps = 0;\n\n        if (timeMs > 0) {\n            bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n        }\n\n        return bitrateKbps;\n    }\n\n    public static setTrackStatsState(trackStats: MediaTrackStats, transceiver: RTCRtpTransceiver | undefined): void {\n        if (transceiver === undefined) {\n            trackStats.alive = false;\n            return;\n        }\n\n        const track = trackStats.getType() === \"remote\" ? transceiver.receiver.track : transceiver?.sender?.track;\n        if (track === undefined || track === null) {\n            trackStats.alive = false;\n            return;\n        }\n\n        if (track.readyState === \"ended\") {\n            trackStats.alive = false;\n            return;\n        }\n        trackStats.muted = track.muted;\n        trackStats.enabled = track.enabled;\n        trackStats.alive = true;\n    }\n\n    public static buildTrackSummary(trackStatsList: MediaTrackStats[]): {\n        audioTrackSummary: TrackSummary;\n        videoTrackSummary: TrackSummary;\n    } {\n        const audioTrackSummary = { count: 0, muted: 0 };\n        const videoTrackSummary = { count: 0, muted: 0 };\n        trackStatsList\n            .filter((t) => t.getType() === \"remote\")\n            .forEach((stats) => {\n                const trackSummary = stats.kind === \"video\" ? videoTrackSummary : audioTrackSummary;\n                trackSummary.count++;\n                if (stats.alive && stats.muted) {\n                    trackSummary.muted++;\n                }\n            });\n        return { audioTrackSummary, videoTrackSummary };\n    }\n\n    public static buildJitter(trackStats: MediaTrackStats, statsReport: any): void {\n        if (statsReport.type !== \"inbound-rtp\") {\n            return;\n        }\n\n        const jitterStr = statsReport?.jitter;\n        if (jitterStr !== undefined) {\n            const jitter = StatsValueFormatter.getNonNegativeValue(jitterStr);\n            trackStats.setJitter(Math.round(jitter * 1000));\n        } else {\n            trackStats.setJitter(-1);\n        }\n    }\n}\n"],"mappings":";;;;;;AACA,IAAAA,oBAAA,GAAAC,OAAA;AAGO,MAAMC,kBAAkB,CAAC;EAC5B,OAAcC,wBAAwBA,CAACC,UAA2B,EAAEC,GAAQ,EAAQ;IAChF,MAAMC,UAAU,GAAG;MACfC,MAAM,EAAEF,GAAG,CAACG,WAAW;MACvBC,KAAK,EAAEJ,GAAG,CAACK;IACf,CAAC;IACD,MAAMC,SAAS,GAAGN,GAAG,CAACO,eAAe;IAErC,IAAIN,UAAU,CAACC,MAAM,IAAID,UAAU,CAACG,KAAK,EAAE;MACvCL,UAAU,CAACS,aAAa,CAACP,UAAU,CAAC;IACxC;IACAF,UAAU,CAACU,YAAY,CAACC,IAAI,CAACC,KAAK,CAACL,SAAS,IAAI,CAAC,CAAC,CAAC;EACvD;EAEA,OAAcM,2BAA2BA,CAACb,UAA2B,EAAEC,GAAQ,EAAEa,MAAW,EAAEC,KAAa,EAAQ;IAC/G,IAAIR,SAAS,GAAGP,UAAU,CAACgB,YAAY,EAAE;IACzC,IAAI,CAACT,SAAS,EAAE;MACZ,IAAIO,MAAM,EAAE;QACR,MAAMG,MAAM,GAAGhB,GAAG,CAACiB,SAAS,GAAGJ,MAAM,CAACI,SAAS;QAE/C,IAAID,MAAM,GAAG,CAAC,IAAIhB,GAAG,CAACkB,UAAU,EAAE;UAC9B,MAAMC,yBAAyB,GAAGnB,GAAG,CAACkB,UAAU,GAAGL,MAAM,CAACK,UAAU;UAEpEZ,SAAS,GAAIa,yBAAyB,GAAGH,MAAM,GAAI,IAAI;QAC3D;MACJ;MAEA,IAAI,CAACV,SAAS,EAAE;QACZ;MACJ;IACJ;;IAEA;IACAA,SAAS,GAAGQ,KAAK,GAAGJ,IAAI,CAACC,KAAK,CAACL,SAAS,GAAGQ,KAAK,CAAC,GAAG,CAAC;IACrDf,UAAU,CAACU,YAAY,CAACH,SAAS,CAAC;EACtC;EAEA,OAAcc,UAAUA,CAACC,MAAkC,EAAEtB,UAA2B,EAAEC,GAAQ,EAAQ;IACtG,MAAMsB,KAAK,GAAGD,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEE,GAAG,CAACvB,GAAG,CAACwB,OAAO,CAAC;IAEtC,IAAIF,KAAK,EAAE;MACP;AACZ;AACA;AACA;AACA;MACY,MAAMG,cAAc,GAAGH,KAAK,CAACI,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAEnDF,cAAc,IAAI1B,UAAU,CAAC6B,QAAQ,CAACH,cAAc,CAAC;IACzD;EACJ;EAEA,OAAcI,oBAAoBA,CAAC9B,UAA2B,EAAEC,GAAQ,EAAEa,MAAW,EAAQ;IACzFd,UAAU,CAAC+B,UAAU,CAAC;MAClBC,QAAQ,EAAElC,kBAAkB,CAACmC,gBAAgB,CACzChC,GAAG,CAACiC,aAAa,EACjBpB,MAAM,CAACoB,aAAa,EACpBjC,GAAG,CAACiB,SAAS,EACbJ,MAAM,CAACI,SAAS,CACnB;MACDiB,MAAM,EAAE;IACZ,CAAC,CAAC;EACN;EAEA,OAAcC,gBAAgBA,CAACpC,UAA2B,EAAEC,GAAQ,EAAEa,MAAW,EAAQ;IACrFd,UAAU,CAAC+B,UAAU,CAAC;MAClBC,QAAQ,EAAE,CAAC;MACXG,MAAM,EAAE,IAAI,CAACF,gBAAgB,CAAChC,GAAG,CAACoC,SAAS,EAAEvB,MAAM,CAACuB,SAAS,EAAEpC,GAAG,CAACiB,SAAS,EAAEJ,MAAM,CAACI,SAAS;IAClG,CAAC,CAAC;EACN;EAEA,OAAcoB,gBAAgBA,CAACtC,UAA2B,EAAEC,GAAQ,EAAEa,MAAW,EAAQ;IACrF,MAAMyB,GAAG,GAAGtC,GAAG,CAACuC,IAAI,KAAK,cAAc,GAAG,aAAa,GAAG,iBAAiB;IAE3E,IAAIC,UAAU,GAAGxC,GAAG,CAACsC,GAAG,CAAC;IACzB,IAAI,CAACE,UAAU,IAAIA,UAAU,GAAG,CAAC,EAAE;MAC/BA,UAAU,GAAG,CAAC;IAClB;IAEA,MAAMC,aAAa,GAAGC,wCAAmB,CAACC,mBAAmB,CAAC9B,MAAM,CAACyB,GAAG,CAAC,CAAC;IAC1E,MAAMM,WAAW,GAAGlC,IAAI,CAACmC,GAAG,CAAC,CAAC,EAAEL,UAAU,GAAGC,aAAa,CAAC;IAE3D,MAAMK,cAAc,GAAGJ,wCAAmB,CAACC,mBAAmB,CAAC3C,GAAG,CAAC+C,WAAW,CAAC;IAC/E,MAAMC,iBAAiB,GAAGN,wCAAmB,CAACC,mBAAmB,CAAC9B,MAAM,CAACkC,WAAW,CAAC;IACrF,MAAME,eAAe,GAAGvC,IAAI,CAACmC,GAAG,CAAC,CAAC,EAAEC,cAAc,GAAGE,iBAAiB,CAAC;IAEvEjD,UAAU,CAACmD,OAAO,CAAC;MACfC,YAAY,EAAEP,WAAW,GAAGK,eAAe;MAC3CF,WAAW,EAAEE,eAAe;MAC5BG,gBAAgB,EAAEpD,GAAG,CAACuC,IAAI,KAAK;IACnC,CAAC,CAAC;EACN;EAEA,OAAeP,gBAAgBA,CAC3BqB,WAAgB,EAChBC,cAAmB,EACnBC,YAAoB,EACpBC,eAAuB,EACjB;IACN,MAAMC,QAAQ,GAAGf,wCAAmB,CAACC,mBAAmB,CAACU,WAAW,CAAC;IACrE,MAAMK,WAAW,GAAGhB,wCAAmB,CAACC,mBAAmB,CAACW,cAAc,CAAC;IAC3E,MAAMK,cAAc,GAAGjD,IAAI,CAACmC,GAAG,CAAC,CAAC,EAAEY,QAAQ,GAAGC,WAAW,CAAC;IAE1D,MAAM1C,MAAM,GAAGuC,YAAY,GAAGC,eAAe;IAC7C,IAAII,WAAW,GAAG,CAAC;IAEnB,IAAI5C,MAAM,GAAG,CAAC,EAAE;MACZ4C,WAAW,GAAGlD,IAAI,CAACC,KAAK,CAAEgD,cAAc,GAAG,CAAC,GAAI3C,MAAM,CAAC;IAC3D;IAEA,OAAO4C,WAAW;EACtB;EAEA,OAAcC,kBAAkBA,CAAC9D,UAA2B,EAAE+D,WAA0C,EAAQ;IAAA,IAAAC,mBAAA;IAC5G,IAAID,WAAW,KAAKE,SAAS,EAAE;MAC3BjE,UAAU,CAACkE,KAAK,GAAG,KAAK;MACxB;IACJ;IAEA,MAAMC,KAAK,GAAGnE,UAAU,CAACoE,OAAO,EAAE,KAAK,QAAQ,GAAGL,WAAW,CAACM,QAAQ,CAACF,KAAK,GAAGJ,WAAW,aAAXA,WAAW,wBAAAC,mBAAA,GAAXD,WAAW,CAAEO,MAAM,cAAAN,mBAAA,uBAAnBA,mBAAA,CAAqBG,KAAK;IACzG,IAAIA,KAAK,KAAKF,SAAS,IAAIE,KAAK,KAAK,IAAI,EAAE;MACvCnE,UAAU,CAACkE,KAAK,GAAG,KAAK;MACxB;IACJ;IAEA,IAAIC,KAAK,CAACI,UAAU,KAAK,OAAO,EAAE;MAC9BvE,UAAU,CAACkE,KAAK,GAAG,KAAK;MACxB;IACJ;IACAlE,UAAU,CAACwE,KAAK,GAAGL,KAAK,CAACK,KAAK;IAC9BxE,UAAU,CAACyE,OAAO,GAAGN,KAAK,CAACM,OAAO;IAClCzE,UAAU,CAACkE,KAAK,GAAG,IAAI;EAC3B;EAEA,OAAcQ,iBAAiBA,CAACC,cAAiC,EAG/D;IACE,MAAMC,iBAAiB,GAAG;MAAEC,KAAK,EAAE,CAAC;MAAEL,KAAK,EAAE;IAAE,CAAC;IAChD,MAAMM,iBAAiB,GAAG;MAAED,KAAK,EAAE,CAAC;MAAEL,KAAK,EAAE;IAAE,CAAC;IAChDG,cAAc,CACTI,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACZ,OAAO,EAAE,KAAK,QAAQ,CAAC,CACvCa,OAAO,CAAEC,KAAK,IAAK;MAChB,MAAMC,YAAY,GAAGD,KAAK,CAACE,IAAI,KAAK,OAAO,GAAGN,iBAAiB,GAAGF,iBAAiB;MACnFO,YAAY,CAACN,KAAK,EAAE;MACpB,IAAIK,KAAK,CAAChB,KAAK,IAAIgB,KAAK,CAACV,KAAK,EAAE;QAC5BW,YAAY,CAACX,KAAK,EAAE;MACxB;IACJ,CAAC,CAAC;IACN,OAAO;MAAEI,iBAAiB;MAAEE;IAAkB,CAAC;EACnD;EAEA,OAAcO,WAAWA,CAACrF,UAA2B,EAAEsF,WAAgB,EAAQ;IAC3E,IAAIA,WAAW,CAAC9C,IAAI,KAAK,aAAa,EAAE;MACpC;IACJ;IAEA,MAAM+C,SAAS,GAAGD,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEE,MAAM;IACrC,IAAID,SAAS,KAAKtB,SAAS,EAAE;MACzB,MAAMuB,MAAM,GAAG7C,wCAAmB,CAACC,mBAAmB,CAAC2C,SAAS,CAAC;MACjEvF,UAAU,CAACyF,SAAS,CAAC9E,IAAI,CAACC,KAAK,CAAC4E,MAAM,GAAG,IAAI,CAAC,CAAC;IACnD,CAAC,MAAM;MACHxF,UAAU,CAACyF,SAAS,CAAC,CAAC,CAAC,CAAC;IAC5B;EACJ;AACJ;AAACC,OAAA,CAAA5F,kBAAA,GAAAA,kBAAA"}