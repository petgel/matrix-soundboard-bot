{"version":3,"file":"statsReportBuilder.js","names":["StatsReportBuilder","build","stats","report","totalPackets","download","upload","lostPackets","bitrateDownload","bitrateUpload","resolutions","local","Map","remote","framerates","codecs","jitter","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","trackId","trackStats","loss","getLoss","type","isDownloadStream","packetsTotal","packetsLost","getBitrate","kind","getType","set","getResolution","getFramerate","getCodec","getJitter","resetBitrate","bitrate","audio","video","packetLoss","total","calculatePacketLoss","framerate","resolution","codec","Math","round","exports"],"sources":["../../../src/webrtc/stats/statsReportBuilder.ts"],"sourcesContent":["/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport { CodecMap, ConnectionStatsReport, FramerateMap, ResolutionMap, TrackID } from \"./statsReport\";\nimport { MediaTrackStats, Resolution } from \"./media/mediaTrackStats\";\n\nexport class StatsReportBuilder {\n    public static build(stats: Map<TrackID, MediaTrackStats>): ConnectionStatsReport {\n        const report = {} as ConnectionStatsReport;\n\n        // process stats\n        const totalPackets = {\n            download: 0,\n            upload: 0,\n        };\n        const lostPackets = {\n            download: 0,\n            upload: 0,\n        };\n        let bitrateDownload = 0;\n        let bitrateUpload = 0;\n        const resolutions: ResolutionMap = {\n            local: new Map<TrackID, Resolution>(),\n            remote: new Map<TrackID, Resolution>(),\n        };\n        const framerates: FramerateMap = { local: new Map<TrackID, number>(), remote: new Map<TrackID, number>() };\n        const codecs: CodecMap = { local: new Map<TrackID, string>(), remote: new Map<TrackID, string>() };\n        const jitter = new Map<TrackID, number>();\n\n        let audioBitrateDownload = 0;\n        let audioBitrateUpload = 0;\n        let videoBitrateDownload = 0;\n        let videoBitrateUpload = 0;\n\n        for (const [trackId, trackStats] of stats) {\n            // process packet loss stats\n            const loss = trackStats.getLoss();\n            const type = loss.isDownloadStream ? \"download\" : \"upload\";\n\n            totalPackets[type] += loss.packetsTotal;\n            lostPackets[type] += loss.packetsLost;\n\n            // process bitrate stats\n            bitrateDownload += trackStats.getBitrate().download;\n            bitrateUpload += trackStats.getBitrate().upload;\n\n            // collect resolutions and framerates\n            if (trackStats.kind === \"audio\") {\n                audioBitrateDownload += trackStats.getBitrate().download;\n                audioBitrateUpload += trackStats.getBitrate().upload;\n            } else {\n                videoBitrateDownload += trackStats.getBitrate().download;\n                videoBitrateUpload += trackStats.getBitrate().upload;\n            }\n\n            resolutions[trackStats.getType()].set(trackId, trackStats.getResolution());\n            framerates[trackStats.getType()].set(trackId, trackStats.getFramerate());\n            codecs[trackStats.getType()].set(trackId, trackStats.getCodec());\n            if (trackStats.getType() === \"remote\") {\n                jitter.set(trackId, trackStats.getJitter());\n            }\n\n            trackStats.resetBitrate();\n        }\n\n        report.bitrate = {\n            upload: bitrateUpload,\n            download: bitrateDownload,\n        };\n\n        report.bitrate.audio = {\n            upload: audioBitrateUpload,\n            download: audioBitrateDownload,\n        };\n\n        report.bitrate.video = {\n            upload: videoBitrateUpload,\n            download: videoBitrateDownload,\n        };\n\n        report.packetLoss = {\n            total: StatsReportBuilder.calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload,\n            ),\n            download: StatsReportBuilder.calculatePacketLoss(lostPackets.download, totalPackets.download),\n            upload: StatsReportBuilder.calculatePacketLoss(lostPackets.upload, totalPackets.upload),\n        };\n        report.framerate = framerates;\n        report.resolution = resolutions;\n        report.codec = codecs;\n        report.jitter = jitter;\n        return report;\n    }\n\n    private static calculatePacketLoss(lostPackets: number, totalPackets: number): number {\n        if (!totalPackets || totalPackets <= 0 || !lostPackets || lostPackets <= 0) {\n            return 0;\n        }\n\n        return Math.round((lostPackets / totalPackets) * 100);\n    }\n}\n"],"mappings":"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"}