"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GroupCallStats = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _statsReportGatherer = require("./statsReportGatherer");
var _statsReportEmitter = require("./statsReportEmitter");
var _summaryStatsReporter = require("./summaryStatsReporter");
/*
Copyright 2023 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

class GroupCallStats {
  constructor(groupCallId, userId, interval = 10000) {
    this.groupCallId = groupCallId;
    this.userId = userId;
    this.interval = interval;
    (0, _defineProperty2.default)(this, "timer", void 0);
    (0, _defineProperty2.default)(this, "gatherers", new Map());
    (0, _defineProperty2.default)(this, "reports", new _statsReportEmitter.StatsReportEmitter());
    (0, _defineProperty2.default)(this, "summaryStatsReporter", new _summaryStatsReporter.SummaryStatsReporter(this.reports));
  }
  start() {
    if (this.timer === undefined) {
      this.timer = setInterval(() => {
        this.processStats();
      }, this.interval);
    }
  }
  stop() {
    if (this.timer !== undefined) {
      clearInterval(this.timer);
      this.gatherers.forEach(c => c.stopProcessingStats());
    }
  }
  hasStatsReportGatherer(callId) {
    return this.gatherers.has(callId);
  }
  addStatsReportGatherer(callId, userId, peerConnection) {
    if (this.hasStatsReportGatherer(callId)) {
      return false;
    }
    this.gatherers.set(callId, new _statsReportGatherer.StatsReportGatherer(callId, userId, peerConnection, this.reports));
    return true;
  }
  removeStatsReportGatherer(callId) {
    return this.gatherers.delete(callId);
  }
  getStatsReportGatherer(callId) {
    return this.hasStatsReportGatherer(callId) ? this.gatherers.get(callId) : undefined;
  }
  processStats() {
    const summary = [];
    this.gatherers.forEach(c => {
      summary.push(c.processStats(this.groupCallId, this.userId));
    });
    Promise.all(summary).then(s => this.summaryStatsReporter.build(s));
  }
}
exports.GroupCallStats = GroupCallStats;
//# sourceMappingURL=groupCallStats.js.map