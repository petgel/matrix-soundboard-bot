{"version":3,"file":"rust-crypto.js","names":["anotherjson","RustSdkCryptoJs","KnownMembership","MatrixEventEvent","DecryptionError","logger","LogSpan","Method","RoomEncryptor","OutgoingRequestProcessor","KeyClaimManager","logDuration","MapWithDefault","CrossSigningKey","DecryptionFailureCode","DeviceVerificationStatus","EventShieldColour","EventShieldReason","UserVerificationStatus","encodeRecoveryKey","deriveRecoveryKeyFromPassphrase","AllDevicesIsolationMode","DeviceIsolationModeKind","CryptoEvent","ImportRoomKeyStage","deviceKeysToDeviceMap","rustDeviceToJsDevice","SECRET_STORAGE_ALGORITHM_V1_AES","CrossSigningIdentity","secretStorageCanAccessSecrets","secretStorageContainsCrossSigningKeys","isVerificationEvent","RustVerificationRequest","verificationMethodIdentifierToMethod","EventType","MsgType","TypedEventEmitter","decryptionKeyMatchesKeyBackupInfo","RustBackupManager","TypedReEmitter","secureRandomString","ClientStoppedError","decodeBase64","encodeBase64","OutgoingRequestsManager","PerSessionKeyBackupDownloader","DehydratedDeviceManager","VerificationMethod","keyFromAuthData","ALL_VERIFICATION_METHODS","Sas","ScanQrCode","ShowQrCode","Reciprocate","RustCrypto","constructor","olmMachine","http","userId","_deviceId","secretStorage","cryptoCallbacks","_defineProperty","outgoingRequestProcessor","outgoingRequestsManager","keyClaimManager","backupManager","perSessionBackupDownloader","dehydratedDeviceManager","eventDecryptor","EventDecryptor","reemitter","reEmit","KeyBackupStatus","KeyBackupSessionsRemaining","KeyBackupFailed","KeyBackupDecryptionKeyCached","DehydratedDeviceCreated","DehydratedDeviceUploaded","RehydrationStarted","RehydrationProgress","RehydrationCompleted","RehydrationError","DehydrationKeyCached","DehydratedDeviceRotationError","crossSigningIdentity","checkKeyBackupAndEnable","getOlmMachineOrThrow","stopped","globalErrorOnUnknownDevices","_v","stop","close","encryptEvent","event","_room","_this","_asyncToGenerator","roomId","getRoomId","encryptor","roomEncryptors","Error","concat","globalBlacklistUnverifiedDevices","deviceIsolationMode","decryptEvent","_this2","attemptEventDecryption","getBackupDecryptor","backupInfo","privKey","_this3","Uint8Array","algorithm","backupDecryptionKey","BackupDecryptionKey","fromBase64","createBackupDecryptor","importBackedUpRoomKeys","keys","backupVersion","opts","_this4","getVersion","versions","getVersions","matrix_sdk_crypto","git_sha","vodozemac","setDeviceIsolationMode","isolationMode","isEncryptionEnabledInRoom","_this5","roomSettings","getRoomSettings","RoomId","Boolean","getOwnDeviceKeys","_this6","identityKeys","ed25519","toBase64","curve25519","prepareToEncrypt","room","prepareForEncryption","forceDiscardSession","_this$roomEncryptors$","exportRoomKeys","_this7","raw","JSON","parse","exportRoomKeysAsJson","_this8","importRoomKeys","_this9","importRoomKeysAsJson","_this10","userHasCrossSigningKeys","_arguments","arguments","_this11","length","undefined","downloadUncached","rustTrackedUsers","trackedUsers","rustTrackedUser","u","toString","request","queryKeysForUsers","clone","makeOutgoingRequest","userIdentity","getIdentity","free","_keyResult$master_key","keyResult","downloadDeviceList","Set","master_keys","Object","values","getUserDeviceInfo","userIds","_arguments2","_this12","deviceMapByUserId","Map","forEach","rustUserId","add","untrackedUsers","has","set","getUserDevices","size","queryResult","entries","device_keys","_ref","deviceKeys","_this13","UserId","userDevices","deviceArray","devices","map","device","deviceId","d","_this14","queryBody","user","authedRequest","Post","prefix","getTrustCrossSignedDevices","_trustCrossSignedDevices","setTrustCrossSignedDevices","val","setDeviceVerified","_arguments3","_this15","verified","getDevice","DeviceId","setLocalTrust","LocalTrust","Verified","Unset","crossSignDevice","_this16","outgoingRequest","verify","getDeviceVerificationStatus","_this17","signedByOwner","isCrossSignedByOwner","crossSigningVerified","isCrossSigningTrusted","localVerified","isLocallyTrusted","trustCrossSignedDevices","getUserVerificationStatus","_this18","isVerified","wasVerified","wasPreviouslyVerified","needsUserApproval","OtherUserIdentity","identityNeedsUserApproval","pinCurrentUserIdentity","_this19","OwnUserIdentity","pinCurrentMasterKey","withdrawVerificationRequirement","_this20","withdrawVerification","isCrossSigningReady","_this21","privateKeysInSecretStorage","privateKeysCachedLocally","getCrossSigningStatus","hasKeysInCache","masterKey","selfSigningKey","userSigningKey","identity","getOwnIdentity","getCrossSigningKeyId","_arguments4","_this22","type","Master","crossSigningStatus","privateKeysOnDevice","hasMaster","hasUserSigning","hasSelfSigning","key","SelfSigning","UserSigning","parsedKey","bootstrapCrossSigning","_this23","isSecretStorageReady","_this24","secretsToCheck","keyBackupEnabled","getActiveBackupVersion","push","bootstrapSecretStorage","_arguments5","_this25","createSecretStorageKey","setupNewSecretStorage","setupNewKeyBackup","isNewSecretStorageKeyNeeded","secretStorageHasAESKey","info","recoveryKey","addSecretStorageKeyToSecretStorage","crossSigningPrivateKeys","exportCrossSigningKeys","hasPrivateKeys","self_signing_key","store","saveBackupKeyToStorage","resetKeyBackup","_this26","keyBackupInfo","getServerBackupInfo","version","backupKeys","getBackupKeys","decryptionKey","backupKeyBase64","secretStorageKey","_this27","_secretStorageKey$key","_secretStorageKey$key2","_this27$cryptoCallbac","_this27$cryptoCallbac2","secretStorageKeyObject","addKey","passphrase","keyInfo","name","privateKey","setDefaultKeyId","keyId","cacheSecretStorageKey","call","_this28","secretStorageKeyTuple","getKey","_this29","publicKeysOnDevice","createRecoveryKeyFromPassphrase","password","_this30","salt","RECOVERY_KEY_DERIVATION_ITERATIONS","iterations","encodedPrivateKey","globalThis","crypto","getRandomValues","getEncryptionInfoForEvent","_this31","getVerificationRequestsToDeviceInProgress","requests","getVerificationRequests","filter","_supportedVerificationMethods","findVerificationRequestDMInProgress","find","_request$roomId","requestVerificationDM","_this32","methods","method","verificationEventContent","verificationRequestContent","eventId","sendVerificationRequestContent","requestVerification","EventId","_this33","txId","event_id","Put","encodeURIComponent","setSupportedVerificationMethods","requestOwnUserVerification","_this34","requestDeviceVerification","_this35","getSessionBackupPrivateKey","_this36","storeSessionBackupPrivateKey","_this37","base64Key","saveBackupDecryptionKey","loadSessionBackupPrivateKeyFromSecretStorage","_this38","backupKey","get","getActiveSessionBackupVersion","_this39","getKeyBackupInfo","_this40","isKeyBackupTrusted","_this41","_this42","deleteKeyBackupVersion","_this43","_this44","setupKeyBackup","o","signObject","obj","_this45","sigs","signatures","unsigned","userSignatures","canonalizedJson","stringify","sign","asJSON","_objectSpread","fromEntries","restoreKeyBackupWithPassphrase","_this46","auth_data","restoreKeyBackup","_this47","decodedDecryptionKey","requestKeyBackupVersion","backupDecryptor","_opts$progressCallbac","progressCallback","stage","Fetch","isDehydrationSupported","_this48","isSupported","startDehydration","_arguments6","_this49","start","importSecretsBundle","secrets","_this50","secretsBundle","SecretsBundle","from_json","exportSecretsBundle","_this51","to_json","encryptToDeviceMessages","eventType","payload","_this52","uniqueUsers","_ref2","ensureSessionsForUsers","Array","from","batch","RoomMessageEncrypted","Promise","all","_ref4","_ref3","encryptedPayload","encryptToDeviceEvent","warn","_x","apply","resetEncryption","authUploadDeviceSigningKeys","_this53","debug","delete","deleteAllKeyBackupVersions","defaultKeyId","getDefaultKeyId","setupNewCrossSigning","receiveSyncChanges","_ref5","_this54","events","oneTimeKeysCounts","unusedFallbackKeys","DeviceLists","result","preprocessToDeviceMessages","_this55","processed","message","KeyVerificationRequest","sender","transactionId","content","transaction_id","onIncomingKeyVerificationRequest","processKeyCounts","_this56","mapOneTimeKeysCount","setUnusedFallbackKeys","processDeviceLists","deviceLists","_this57","_deviceLists$changed","_deviceLists$left","changed","left","onCryptoEvent","_this58","config","getContent","settings","RoomSettings","EncryptionAlgorithm","MegolmV1AesSha2","sessionRotationPeriodMs","rotation_period_ms","sessionRotationPeriodMessages","rotation_period_msgs","setRoomSettings","e","existingEncryptor","onSyncCompleted","syncState","doProcessOutgoingRequests","catch","getVerificationRequest","emit","VerificationRequestReceived","onRoomMembership","member","oldMembership","enc","onRoomKeysUpdated","_this59","onRoomKeyUpdated","maybeUploadKey","_this60","sessionId","senderKey","pendingList","getEventsPendingRoomKey","getId","_loop","ev","attemptDecryption","isRetry","_e","onRoomKeysWithheld","withheld","_this61","session","onUserIdentityUpdated","_this62","newVerification","UserTrustStatusChanged","KeysChanged","onDevicesUpdated","_this63","WillUpdateDevices","DevicesUpdated","handleSecretReceived","value","_this64","handleBackupSecretReceived","checkSecrets","_this65","pendingValues","getSecretsFromInbox","deleteSecretsFromInbox","onLiveEventFromSync","_this66","isState","getUnsigned","processEvent","_ref7","evt","onKeyVerificationEvent","_x2","isDecryptionFailure","isEncrypted","TIMEOUT_DELAY","timeoutId","setTimeout","off","Decrypted","onDecrypted","decryptedEvent","error","clearTimeout","on","_this67","getType","getSender","receiveVerificationEvent","state_key","getStateKey","origin_server_ts","getTs","RoomMessage","msgtype","_this68","_this69","addEventToPendingList","trustRequirement","kind","TrustRequirement","Untrusted","OnlySignedDevicesIsolationMode","CrossSignedOrLegacy","res","decryptRoomEvent","stringifyEvent","DecryptionSettings","removeEventFromPendingList","clearEvent","claimedEd25519Key","senderClaimedEd25519Key","senderCurve25519Key","forwardingCurve25519KeyChain","err","MegolmDecryptionError","onMegolmDecryptionError","UNKNOWN_ERROR","serverBackupInfo","getWireContent","errorDetails","sender_key","session_id","code","DecryptionErrorCode","MissingRoomKey","UnknownMessageIndex","onDecryptionKeyMissingError","membership","getMembershipAtEvent","Join","Invite","HISTORICAL_MESSAGE_USER_NOT_JOINED","deviceCreationTimeMs","HISTORICAL_MESSAGE_NO_KEY_BACKUP","isKeyBackupDownloadConfigured","HISTORICAL_MESSAGE_BACKUP_UNCONFIGURED","HISTORICAL_MESSAGE_WORKING_BACKUP","maybe_withheld","failureCode","MEGOLM_KEY_WITHHELD_FOR_UNVERIFIED_DEVICE","MEGOLM_KEY_WITHHELD","MEGOLM_UNKNOWN_INBOUND_SESSION_ID","OLM_UNKNOWN_MESSAGE_INDEX","SenderIdentityVerificationViolation","SENDER_IDENTITY_PREVIOUSLY_VERIFIED","UnknownSenderDevice","UNKNOWN_SENDER_DEVICE","UnsignedSenderDevice","UNSIGNED_SENDER_DEVICE","description","_this70","getClearContent","status","shieldColour","NONE","shieldReason","encryptionInfo","getRoomEventEncryptionInfo","rustEncryptionInfoToJsEncryptionInfo","roomPendingEvents","eventsPendingKey","sessionPendingEvents","getOrCreate","getWireType","shieldState","color","ShieldColor","Grey","GREY","None","RED","ShieldStateCode","AuthenticityNotGuaranteed","AUTHENTICITY_NOT_GUARANTEED","UnknownDevice","UNKNOWN_DEVICE","UnsignedDevice","UNSIGNED_DEVICE","UnverifiedIdentity","UNVERIFIED_IDENTITY","SentInClear","SENT_IN_CLEAR","VerificationViolation","VERIFICATION_VIOLATION"],"sources":["../../src/rust-crypto/rust-crypto.ts"],"sourcesContent":["/*\nCopyright 2022-2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport anotherjson from \"another-json\";\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport type { IEventDecryptionResult, IMegolmSessionData } from \"../@types/crypto.ts\";\nimport { KnownMembership } from \"../@types/membership.ts\";\nimport type { IDeviceLists, IToDeviceEvent } from \"../sync-accumulator.ts\";\nimport type { ToDevicePayload, ToDeviceBatch } from \"../models/ToDeviceMessage.ts\";\nimport { type MatrixEvent, MatrixEventEvent } from \"../models/event.ts\";\nimport { type Room } from \"../models/room.ts\";\nimport { type RoomMember } from \"../models/room-member.ts\";\nimport {\n    type BackupDecryptor,\n    type CryptoBackend,\n    DecryptionError,\n    type OnSyncCompletedData,\n} from \"../common-crypto/CryptoBackend.ts\";\nimport { logger, type Logger, LogSpan } from \"../logger.ts\";\nimport { type IHttpOpts, type MatrixHttpApi, Method } from \"../http-api/index.ts\";\nimport { RoomEncryptor } from \"./RoomEncryptor.ts\";\nimport { OutgoingRequestProcessor } from \"./OutgoingRequestProcessor.ts\";\nimport { KeyClaimManager } from \"./KeyClaimManager.ts\";\nimport { logDuration, MapWithDefault } from \"../utils.ts\";\nimport {\n    type BackupTrustInfo,\n    type BootstrapCrossSigningOpts,\n    type CreateSecretStorageOpts,\n    CrossSigningKey,\n    type CrossSigningKeyInfo,\n    type CrossSigningStatus,\n    type CryptoApi,\n    type CryptoCallbacks,\n    DecryptionFailureCode,\n    DeviceVerificationStatus,\n    type EventEncryptionInfo,\n    EventShieldColour,\n    EventShieldReason,\n    type GeneratedSecretStorageKey,\n    type ImportRoomKeysOpts,\n    type KeyBackupCheck,\n    type KeyBackupInfo,\n    type OwnDeviceKeys,\n    UserVerificationStatus,\n    type VerificationRequest,\n    encodeRecoveryKey,\n    deriveRecoveryKeyFromPassphrase,\n    type DeviceIsolationMode,\n    AllDevicesIsolationMode,\n    DeviceIsolationModeKind,\n    CryptoEvent,\n    type CryptoEventHandlerMap,\n    type KeyBackupRestoreOpts,\n    type KeyBackupRestoreResult,\n    type StartDehydrationOpts,\n    ImportRoomKeyStage,\n} from \"../crypto-api/index.ts\";\nimport { deviceKeysToDeviceMap, rustDeviceToJsDevice } from \"./device-converter.ts\";\nimport { type IDownloadKeyResult, type IQueryKeysRequest } from \"../client.ts\";\nimport { type Device, type DeviceMap } from \"../models/device.ts\";\nimport {\n    SECRET_STORAGE_ALGORITHM_V1_AES,\n    type SecretStorageKey,\n    type ServerSideSecretStorage,\n} from \"../secret-storage.ts\";\nimport { CrossSigningIdentity } from \"./CrossSigningIdentity.ts\";\nimport { secretStorageCanAccessSecrets, secretStorageContainsCrossSigningKeys } from \"./secret-storage.ts\";\nimport { isVerificationEvent, RustVerificationRequest, verificationMethodIdentifierToMethod } from \"./verification.ts\";\nimport { EventType, MsgType } from \"../@types/event.ts\";\nimport { TypedEventEmitter } from \"../models/typed-event-emitter.ts\";\nimport { decryptionKeyMatchesKeyBackupInfo, RustBackupManager } from \"./backup.ts\";\nimport { TypedReEmitter } from \"../ReEmitter.ts\";\nimport { secureRandomString } from \"../randomstring.ts\";\nimport { ClientStoppedError } from \"../errors.ts\";\nimport { type ISignatures } from \"../@types/signed.ts\";\nimport { decodeBase64, encodeBase64 } from \"../base64.ts\";\nimport { OutgoingRequestsManager } from \"./OutgoingRequestsManager.ts\";\nimport { PerSessionKeyBackupDownloader } from \"./PerSessionKeyBackupDownloader.ts\";\nimport { DehydratedDeviceManager } from \"./DehydratedDeviceManager.ts\";\nimport { VerificationMethod } from \"../types.ts\";\nimport { keyFromAuthData } from \"../common-crypto/key-passphrase.ts\";\nimport { type UIAuthCallback } from \"../interactive-auth.ts\";\n\nconst ALL_VERIFICATION_METHODS = [\n    VerificationMethod.Sas,\n    VerificationMethod.ScanQrCode,\n    VerificationMethod.ShowQrCode,\n    VerificationMethod.Reciprocate,\n];\n\ninterface ISignableObject {\n    signatures?: ISignatures;\n    unsigned?: object;\n}\n\n/**\n * An implementation of {@link CryptoBackend} using the Rust matrix-sdk-crypto.\n *\n * @internal\n */\nexport class RustCrypto extends TypedEventEmitter<RustCryptoEvents, CryptoEventHandlerMap> implements CryptoBackend {\n    /**\n     * The number of iterations to use when deriving a recovery key from a passphrase.\n     */\n    private readonly RECOVERY_KEY_DERIVATION_ITERATIONS = 500000;\n\n    private _trustCrossSignedDevices = true;\n    private deviceIsolationMode: DeviceIsolationMode = new AllDevicesIsolationMode(false);\n\n    /** whether {@link stop} has been called */\n    private stopped = false;\n\n    /** mapping of roomId → encryptor class */\n    private roomEncryptors: Record<string, RoomEncryptor> = {};\n\n    private eventDecryptor: EventDecryptor;\n    private keyClaimManager: KeyClaimManager;\n    private outgoingRequestProcessor: OutgoingRequestProcessor;\n    private crossSigningIdentity: CrossSigningIdentity;\n    private readonly backupManager: RustBackupManager;\n    private outgoingRequestsManager: OutgoingRequestsManager;\n    private readonly perSessionBackupDownloader: PerSessionKeyBackupDownloader;\n    private readonly dehydratedDeviceManager: DehydratedDeviceManager;\n    private readonly reemitter = new TypedReEmitter<RustCryptoEvents, CryptoEventHandlerMap>(this);\n\n    public constructor(\n        private readonly logger: Logger,\n\n        /** The `OlmMachine` from the underlying rust crypto sdk. */\n        private readonly olmMachine: RustSdkCryptoJs.OlmMachine,\n\n        /**\n         * Low-level HTTP interface: used to make outgoing requests required by the rust SDK.\n         *\n         * We expect it to set the access token, etc.\n         */\n        private readonly http: MatrixHttpApi<IHttpOpts & { onlyData: true }>,\n\n        /** The local user's User ID. */\n        private readonly userId: string,\n\n        /** The local user's Device ID. */\n        _deviceId: string,\n\n        /** Interface to server-side secret storage */\n        private readonly secretStorage: ServerSideSecretStorage,\n\n        /** Crypto callbacks provided by the application */\n        private readonly cryptoCallbacks: CryptoCallbacks,\n    ) {\n        super();\n        this.outgoingRequestProcessor = new OutgoingRequestProcessor(olmMachine, http);\n        this.outgoingRequestsManager = new OutgoingRequestsManager(\n            this.logger,\n            olmMachine,\n            this.outgoingRequestProcessor,\n        );\n\n        this.keyClaimManager = new KeyClaimManager(olmMachine, this.outgoingRequestProcessor);\n\n        this.backupManager = new RustBackupManager(olmMachine, http, this.outgoingRequestProcessor);\n        this.perSessionBackupDownloader = new PerSessionKeyBackupDownloader(\n            this.logger,\n            this.olmMachine,\n            this.http,\n            this.backupManager,\n        );\n        this.dehydratedDeviceManager = new DehydratedDeviceManager(\n            this.logger,\n            olmMachine,\n            http,\n            this.outgoingRequestProcessor,\n            secretStorage,\n        );\n        this.eventDecryptor = new EventDecryptor(this.logger, olmMachine, this.perSessionBackupDownloader);\n\n        // re-emit the events emitted by managers\n        this.reemitter.reEmit(this.backupManager, [\n            CryptoEvent.KeyBackupStatus,\n            CryptoEvent.KeyBackupSessionsRemaining,\n            CryptoEvent.KeyBackupFailed,\n            CryptoEvent.KeyBackupDecryptionKeyCached,\n        ]);\n        this.reemitter.reEmit(this.dehydratedDeviceManager, [\n            CryptoEvent.DehydratedDeviceCreated,\n            CryptoEvent.DehydratedDeviceUploaded,\n            CryptoEvent.RehydrationStarted,\n            CryptoEvent.RehydrationProgress,\n            CryptoEvent.RehydrationCompleted,\n            CryptoEvent.RehydrationError,\n            CryptoEvent.DehydrationKeyCached,\n            CryptoEvent.DehydratedDeviceRotationError,\n        ]);\n\n        this.crossSigningIdentity = new CrossSigningIdentity(olmMachine, this.outgoingRequestProcessor, secretStorage);\n\n        // Check and start in background the key backup connection\n        this.checkKeyBackupAndEnable();\n    }\n\n    /**\n     * Return the OlmMachine only if {@link RustCrypto#stop} has not been called.\n     *\n     * This allows us to better handle race conditions where the client is stopped before or during a crypto API call.\n     *\n     * @throws ClientStoppedError if {@link RustCrypto#stop} has been called.\n     */\n    private getOlmMachineOrThrow(): RustSdkCryptoJs.OlmMachine {\n        if (this.stopped) {\n            throw new ClientStoppedError();\n        }\n        return this.olmMachine;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // CryptoBackend implementation\n    //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    public set globalErrorOnUnknownDevices(_v: boolean) {\n        // Not implemented for rust crypto.\n    }\n\n    public get globalErrorOnUnknownDevices(): boolean {\n        // Not implemented for rust crypto.\n        return false;\n    }\n\n    public stop(): void {\n        // stop() may be called multiple times, but attempting to close() the OlmMachine twice\n        // will cause an error.\n        if (this.stopped) {\n            return;\n        }\n        this.stopped = true;\n\n        this.keyClaimManager.stop();\n        this.backupManager.stop();\n        this.outgoingRequestsManager.stop();\n        this.perSessionBackupDownloader.stop();\n        this.dehydratedDeviceManager.stop();\n\n        // make sure we close() the OlmMachine; doing so means that all the Rust objects will be\n        // cleaned up; in particular, the indexeddb connections will be closed, which means they\n        // can then be deleted.\n        this.olmMachine.close();\n    }\n\n    public async encryptEvent(event: MatrixEvent, _room: Room): Promise<void> {\n        const roomId = event.getRoomId()!;\n        const encryptor = this.roomEncryptors[roomId];\n\n        if (!encryptor) {\n            throw new Error(`Cannot encrypt event in unconfigured room ${roomId}`);\n        }\n\n        await encryptor.encryptEvent(event, this.globalBlacklistUnverifiedDevices, this.deviceIsolationMode);\n    }\n\n    public async decryptEvent(event: MatrixEvent): Promise<IEventDecryptionResult> {\n        const roomId = event.getRoomId();\n        if (!roomId) {\n            // presumably, a to-device message. These are normally decrypted in preprocessToDeviceMessages\n            // so the fact it has come back here suggests that decryption failed.\n            //\n            // once we drop support for the libolm crypto implementation, we can stop passing to-device messages\n            // through decryptEvent and hence get rid of this case.\n            throw new Error(\"to-device event was not decrypted in preprocessToDeviceMessages\");\n        }\n        return await this.eventDecryptor.attemptEventDecryption(event, this.deviceIsolationMode);\n    }\n\n    /**\n     * Implementation of {@link CryptoBackend#getBackupDecryptor}.\n     */\n    public async getBackupDecryptor(backupInfo: KeyBackupInfo, privKey: Uint8Array): Promise<BackupDecryptor> {\n        if (!(privKey instanceof Uint8Array)) {\n            throw new Error(`getBackupDecryptor: expects Uint8Array`);\n        }\n\n        if (backupInfo.algorithm != \"m.megolm_backup.v1.curve25519-aes-sha2\") {\n            throw new Error(`getBackupDecryptor: Unsupported algorithm ${backupInfo.algorithm}`);\n        }\n\n        const backupDecryptionKey = RustSdkCryptoJs.BackupDecryptionKey.fromBase64(encodeBase64(privKey));\n        if (!decryptionKeyMatchesKeyBackupInfo(backupDecryptionKey, backupInfo)) {\n            throw new Error(`getBackupDecryptor: key backup on server does not match the decryption key`);\n        }\n\n        return this.backupManager.createBackupDecryptor(backupDecryptionKey);\n    }\n\n    /**\n     * Implementation of {@link CryptoBackend#importBackedUpRoomKeys}.\n     */\n    public async importBackedUpRoomKeys(\n        keys: IMegolmSessionData[],\n        backupVersion: string,\n        opts?: ImportRoomKeysOpts,\n    ): Promise<void> {\n        return await this.backupManager.importBackedUpRoomKeys(keys, backupVersion, opts);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // CryptoApi implementation\n    //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    public globalBlacklistUnverifiedDevices = false;\n\n    /**\n     * Implementation of {@link CryptoApi#getVersion}.\n     */\n    public getVersion(): string {\n        const versions = RustSdkCryptoJs.getVersions();\n        return `Rust SDK ${versions.matrix_sdk_crypto} (${versions.git_sha}), Vodozemac ${versions.vodozemac}`;\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#setDeviceIsolationMode}.\n     */\n    public setDeviceIsolationMode(isolationMode: DeviceIsolationMode): void {\n        this.deviceIsolationMode = isolationMode;\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#isEncryptionEnabledInRoom}.\n     */\n    public async isEncryptionEnabledInRoom(roomId: string): Promise<boolean> {\n        const roomSettings: RustSdkCryptoJs.RoomSettings | undefined = await this.olmMachine.getRoomSettings(\n            new RustSdkCryptoJs.RoomId(roomId),\n        );\n        return Boolean(roomSettings?.algorithm);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getOwnDeviceKeys}.\n     */\n    public async getOwnDeviceKeys(): Promise<OwnDeviceKeys> {\n        const keys = this.olmMachine.identityKeys;\n        return { ed25519: keys.ed25519.toBase64(), curve25519: keys.curve25519.toBase64() };\n    }\n\n    public prepareToEncrypt(room: Room): void {\n        const encryptor = this.roomEncryptors[room.roomId];\n\n        if (encryptor) {\n            encryptor.prepareForEncryption(this.globalBlacklistUnverifiedDevices, this.deviceIsolationMode);\n        }\n    }\n\n    public forceDiscardSession(roomId: string): Promise<void> {\n        return this.roomEncryptors[roomId]?.forceDiscardSession();\n    }\n\n    public async exportRoomKeys(): Promise<IMegolmSessionData[]> {\n        const raw = await this.olmMachine.exportRoomKeys(() => true);\n        return JSON.parse(raw);\n    }\n\n    public async exportRoomKeysAsJson(): Promise<string> {\n        return await this.olmMachine.exportRoomKeys(() => true);\n    }\n\n    public async importRoomKeys(keys: IMegolmSessionData[], opts?: ImportRoomKeysOpts): Promise<void> {\n        return await this.backupManager.importRoomKeys(keys, opts);\n    }\n\n    public async importRoomKeysAsJson(keys: string, opts?: ImportRoomKeysOpts): Promise<void> {\n        return await this.backupManager.importRoomKeysAsJson(keys, opts);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi.userHasCrossSigningKeys}.\n     */\n    public async userHasCrossSigningKeys(userId = this.userId, downloadUncached = false): Promise<boolean> {\n        // TODO: could probably do with a more efficient way of doing this than returning the whole set and searching\n        const rustTrackedUsers: Set<RustSdkCryptoJs.UserId> = await this.olmMachine.trackedUsers();\n        let rustTrackedUser: RustSdkCryptoJs.UserId | undefined;\n        for (const u of rustTrackedUsers) {\n            if (userId === u.toString()) {\n                rustTrackedUser = u;\n                break;\n            }\n        }\n\n        if (rustTrackedUser !== undefined) {\n            if (userId === this.userId) {\n                /* make sure we have an *up-to-date* idea of the user's cross-signing keys. This is important, because if we\n                 * return \"false\" here, we will end up generating new cross-signing keys and replacing the existing ones.\n                 */\n                const request = this.olmMachine.queryKeysForUsers(\n                    // clone as rust layer will take ownership and it's reused later\n                    [rustTrackedUser.clone()],\n                );\n                await this.outgoingRequestProcessor.makeOutgoingRequest(request);\n            }\n            const userIdentity = await this.olmMachine.getIdentity(rustTrackedUser);\n            userIdentity?.free();\n            return userIdentity !== undefined;\n        } else if (downloadUncached) {\n            // Download the cross signing keys and check if the master key is available\n            const keyResult = await this.downloadDeviceList(new Set([userId]));\n            const keys = keyResult.master_keys?.[userId];\n\n            // No master key\n            if (!keys) return false;\n\n            // `keys` is an object with { [`ed25519:${pubKey}`]: pubKey }\n            // We assume only a single key, and we want the bare form without type\n            // prefix, so we select the values.\n            return Boolean(Object.values(keys.keys)[0]);\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get the device information for the given list of users.\n     *\n     * @param userIds - The users to fetch.\n     * @param downloadUncached - If true, download the device list for users whose device list we are not\n     *    currently tracking. Defaults to false, in which case such users will not appear at all in the result map.\n     *\n     * @returns A map `{@link DeviceMap}`.\n     */\n    public async getUserDeviceInfo(userIds: string[], downloadUncached = false): Promise<DeviceMap> {\n        const deviceMapByUserId = new Map<string, Map<string, Device>>();\n        const rustTrackedUsers: Set<RustSdkCryptoJs.UserId> = await this.getOlmMachineOrThrow().trackedUsers();\n\n        // Convert RustSdkCryptoJs.UserId to a `Set<string>`\n        const trackedUsers = new Set<string>();\n        rustTrackedUsers.forEach((rustUserId) => trackedUsers.add(rustUserId.toString()));\n\n        // Keep untracked user to download their keys after\n        const untrackedUsers: Set<string> = new Set();\n\n        for (const userId of userIds) {\n            // if this is a tracked user, we can just fetch the device list from the rust-sdk\n            // (NB: this is probably ok even if we race with a leave event such that we stop tracking the user's\n            // devices: the rust-sdk will return the last-known device list, which will be good enough.)\n            if (trackedUsers.has(userId)) {\n                deviceMapByUserId.set(userId, await this.getUserDevices(userId));\n            } else {\n                untrackedUsers.add(userId);\n            }\n        }\n\n        // for any users whose device lists we are not tracking, fall back to downloading the device list\n        // over HTTP.\n        if (downloadUncached && untrackedUsers.size >= 1) {\n            const queryResult = await this.downloadDeviceList(untrackedUsers);\n            Object.entries(queryResult.device_keys).forEach(([userId, deviceKeys]) =>\n                deviceMapByUserId.set(userId, deviceKeysToDeviceMap(deviceKeys)),\n            );\n        }\n\n        return deviceMapByUserId;\n    }\n\n    /**\n     * Get the device list for the given user from the olm machine\n     * @param userId - Rust SDK UserId\n     */\n    private async getUserDevices(userId: string): Promise<Map<string, Device>> {\n        const rustUserId = new RustSdkCryptoJs.UserId(userId);\n\n        // For reasons I don't really understand, the Javascript FinalizationRegistry doesn't seem to run the\n        // registered callbacks when `userDevices` goes out of scope, nor when the individual devices in the array\n        // returned by `userDevices.devices` do so.\n        //\n        // This is particularly problematic, because each of those structures holds a reference to the\n        // VerificationMachine, which in turn holds a reference to the IndexeddbCryptoStore. Hence, we end up leaking\n        // open connections to the crypto store, which means the store can't be deleted on logout.\n        //\n        // To fix this, we explicitly call `.free` on each of the objects, which tells the rust code to drop the\n        // allocated memory and decrement the refcounts for the crypto store.\n\n        // Wait for up to a second for any in-flight device list requests to complete.\n        // The reason for this isn't so much to avoid races (some level of raciness is\n        // inevitable for this method) but to make testing easier.\n        const userDevices: RustSdkCryptoJs.UserDevices = await this.olmMachine.getUserDevices(rustUserId, 1);\n        try {\n            const deviceArray: RustSdkCryptoJs.Device[] = userDevices.devices();\n            try {\n                return new Map(\n                    deviceArray.map((device) => [device.deviceId.toString(), rustDeviceToJsDevice(device, rustUserId)]),\n                );\n            } finally {\n                deviceArray.forEach((d) => d.free());\n            }\n        } finally {\n            userDevices.free();\n        }\n    }\n\n    /**\n     * Download the given user keys by calling `/keys/query` request\n     * @param untrackedUsers - download keys of these users\n     */\n    private async downloadDeviceList(untrackedUsers: Set<string>): Promise<IDownloadKeyResult> {\n        const queryBody: IQueryKeysRequest = { device_keys: {} };\n        untrackedUsers.forEach((user) => (queryBody.device_keys[user] = []));\n\n        return await this.http.authedRequest(Method.Post, \"/_matrix/client/v3/keys/query\", undefined, queryBody, {\n            prefix: \"\",\n        });\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getTrustCrossSignedDevices}.\n     */\n    public getTrustCrossSignedDevices(): boolean {\n        return this._trustCrossSignedDevices;\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#setTrustCrossSignedDevices}.\n     */\n    public setTrustCrossSignedDevices(val: boolean): void {\n        this._trustCrossSignedDevices = val;\n        // TODO: legacy crypto goes through the list of known devices and emits DeviceVerificationChanged\n        //  events. Maybe we need to do the same?\n    }\n\n    /**\n     * Mark the given device as locally verified.\n     *\n     * Implementation of {@link CryptoApi#setDeviceVerified}.\n     */\n    public async setDeviceVerified(userId: string, deviceId: string, verified = true): Promise<void> {\n        const device: RustSdkCryptoJs.Device | undefined = await this.olmMachine.getDevice(\n            new RustSdkCryptoJs.UserId(userId),\n            new RustSdkCryptoJs.DeviceId(deviceId),\n        );\n\n        if (!device) {\n            throw new Error(`Unknown device ${userId}|${deviceId}`);\n        }\n        try {\n            await device.setLocalTrust(\n                verified ? RustSdkCryptoJs.LocalTrust.Verified : RustSdkCryptoJs.LocalTrust.Unset,\n            );\n        } finally {\n            device.free();\n        }\n    }\n\n    /**\n     * Blindly cross-sign one of our other devices.\n     *\n     * Implementation of {@link CryptoApi#crossSignDevice}.\n     */\n    public async crossSignDevice(deviceId: string): Promise<void> {\n        const device: RustSdkCryptoJs.Device | undefined = await this.olmMachine.getDevice(\n            new RustSdkCryptoJs.UserId(this.userId),\n            new RustSdkCryptoJs.DeviceId(deviceId),\n        );\n        if (!device) {\n            throw new Error(`Unknown device ${deviceId}`);\n        }\n        try {\n            const outgoingRequest: RustSdkCryptoJs.SignatureUploadRequest = await device.verify();\n            await this.outgoingRequestProcessor.makeOutgoingRequest(outgoingRequest);\n        } finally {\n            device.free();\n        }\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getDeviceVerificationStatus}.\n     */\n    public async getDeviceVerificationStatus(\n        userId: string,\n        deviceId: string,\n    ): Promise<DeviceVerificationStatus | null> {\n        const device: RustSdkCryptoJs.Device | undefined = await this.olmMachine.getDevice(\n            new RustSdkCryptoJs.UserId(userId),\n            new RustSdkCryptoJs.DeviceId(deviceId),\n        );\n\n        if (!device) return null;\n        try {\n            return new DeviceVerificationStatus({\n                signedByOwner: device.isCrossSignedByOwner(),\n                crossSigningVerified: device.isCrossSigningTrusted(),\n                localVerified: device.isLocallyTrusted(),\n                trustCrossSignedDevices: this._trustCrossSignedDevices,\n            });\n        } finally {\n            device.free();\n        }\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getUserVerificationStatus}.\n     */\n    public async getUserVerificationStatus(userId: string): Promise<UserVerificationStatus> {\n        const userIdentity: RustSdkCryptoJs.OtherUserIdentity | RustSdkCryptoJs.OwnUserIdentity | undefined =\n            await this.getOlmMachineOrThrow().getIdentity(new RustSdkCryptoJs.UserId(userId));\n        if (userIdentity === undefined) {\n            return new UserVerificationStatus(false, false, false);\n        }\n\n        const verified = userIdentity.isVerified();\n        const wasVerified = userIdentity.wasPreviouslyVerified();\n        const needsUserApproval =\n            userIdentity instanceof RustSdkCryptoJs.OtherUserIdentity\n                ? userIdentity.identityNeedsUserApproval()\n                : false;\n        userIdentity.free();\n        return new UserVerificationStatus(verified, wasVerified, false, needsUserApproval);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#pinCurrentUserIdentity}.\n     */\n    public async pinCurrentUserIdentity(userId: string): Promise<void> {\n        const userIdentity: RustSdkCryptoJs.OtherUserIdentity | RustSdkCryptoJs.OwnUserIdentity | undefined =\n            await this.getOlmMachineOrThrow().getIdentity(new RustSdkCryptoJs.UserId(userId));\n\n        if (userIdentity === undefined) {\n            throw new Error(\"Cannot pin identity of unknown user\");\n        }\n\n        if (userIdentity instanceof RustSdkCryptoJs.OwnUserIdentity) {\n            throw new Error(\"Cannot pin identity of own user\");\n        }\n\n        await userIdentity.pinCurrentMasterKey();\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#withdrawVerificationRequirement}.\n     */\n    public async withdrawVerificationRequirement(userId: string): Promise<void> {\n        const userIdentity: RustSdkCryptoJs.OtherUserIdentity | RustSdkCryptoJs.OwnUserIdentity | undefined =\n            await this.getOlmMachineOrThrow().getIdentity(new RustSdkCryptoJs.UserId(userId));\n\n        if (userIdentity === undefined) {\n            throw new Error(\"Cannot withdraw verification of unknown user\");\n        }\n\n        await userIdentity.withdrawVerification();\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#isCrossSigningReady}\n     */\n    public async isCrossSigningReady(): Promise<boolean> {\n        const { privateKeysInSecretStorage, privateKeysCachedLocally } = await this.getCrossSigningStatus();\n        const hasKeysInCache =\n            Boolean(privateKeysCachedLocally.masterKey) &&\n            Boolean(privateKeysCachedLocally.selfSigningKey) &&\n            Boolean(privateKeysCachedLocally.userSigningKey);\n\n        const identity = await this.getOwnIdentity();\n\n        // Cross-signing is ready if the public identity is trusted, and the private keys\n        // are either cached, or accessible via secret-storage.\n        return !!identity?.isVerified() && (hasKeysInCache || privateKeysInSecretStorage);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getCrossSigningKeyId}\n     */\n    public async getCrossSigningKeyId(type: CrossSigningKey = CrossSigningKey.Master): Promise<string | null> {\n        const userIdentity: RustSdkCryptoJs.OwnUserIdentity | undefined = await this.olmMachine.getIdentity(\n            new RustSdkCryptoJs.UserId(this.userId),\n        );\n        if (!userIdentity) {\n            // The public keys are not available on this device\n            return null;\n        }\n\n        try {\n            const crossSigningStatus: RustSdkCryptoJs.CrossSigningStatus = await this.olmMachine.crossSigningStatus();\n\n            const privateKeysOnDevice =\n                crossSigningStatus.hasMaster && crossSigningStatus.hasUserSigning && crossSigningStatus.hasSelfSigning;\n\n            if (!privateKeysOnDevice) {\n                // The private keys are not available on this device\n                return null;\n            }\n\n            if (!userIdentity.isVerified()) {\n                // We have both public and private keys, but they don't match!\n                return null;\n            }\n\n            let key: string;\n            switch (type) {\n                case CrossSigningKey.Master:\n                    key = userIdentity.masterKey;\n                    break;\n                case CrossSigningKey.SelfSigning:\n                    key = userIdentity.selfSigningKey;\n                    break;\n                case CrossSigningKey.UserSigning:\n                    key = userIdentity.userSigningKey;\n                    break;\n                default:\n                    // Unknown type\n                    return null;\n            }\n\n            const parsedKey: CrossSigningKeyInfo = JSON.parse(key);\n            // `keys` is an object with { [`ed25519:${pubKey}`]: pubKey }\n            // We assume only a single key, and we want the bare form without type\n            // prefix, so we select the values.\n            return Object.values(parsedKey.keys)[0];\n        } finally {\n            userIdentity.free();\n        }\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#bootstrapCrossSigning}\n     */\n    public async bootstrapCrossSigning(opts: BootstrapCrossSigningOpts): Promise<void> {\n        await this.crossSigningIdentity.bootstrapCrossSigning(opts);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#isSecretStorageReady}\n     */\n    public async isSecretStorageReady(): Promise<boolean> {\n        // make sure that the cross-signing keys are stored\n        const secretsToCheck: SecretStorageKey[] = [\n            \"m.cross_signing.master\",\n            \"m.cross_signing.user_signing\",\n            \"m.cross_signing.self_signing\",\n        ];\n\n        // if key backup is active, we also need to check that the backup decryption key is stored\n        const keyBackupEnabled = (await this.backupManager.getActiveBackupVersion()) != null;\n        if (keyBackupEnabled) {\n            secretsToCheck.push(\"m.megolm_backup.v1\");\n        }\n\n        return secretStorageCanAccessSecrets(this.secretStorage, secretsToCheck);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#bootstrapSecretStorage}\n     */\n    public async bootstrapSecretStorage({\n        createSecretStorageKey,\n        setupNewSecretStorage,\n        setupNewKeyBackup,\n    }: CreateSecretStorageOpts = {}): Promise<void> {\n        // If an AES Key is already stored in the secret storage and setupNewSecretStorage is not set\n        // we don't want to create a new key\n        const isNewSecretStorageKeyNeeded = setupNewSecretStorage || !(await this.secretStorageHasAESKey());\n\n        if (isNewSecretStorageKeyNeeded) {\n            if (!createSecretStorageKey) {\n                throw new Error(\"unable to create a new secret storage key, createSecretStorageKey is not set\");\n            }\n\n            // Create a new storage key and add it to secret storage\n            this.logger.info(\"bootstrapSecretStorage: creating new secret storage key\");\n            const recoveryKey = await createSecretStorageKey();\n            if (!recoveryKey) {\n                throw new Error(\"createSecretStorageKey() callback did not return a secret storage key\");\n            }\n            await this.addSecretStorageKeyToSecretStorage(recoveryKey);\n        }\n\n        const crossSigningPrivateKeys: RustSdkCryptoJs.CrossSigningKeyExport | undefined =\n            await this.olmMachine.exportCrossSigningKeys();\n        const hasPrivateKeys =\n            crossSigningPrivateKeys &&\n            crossSigningPrivateKeys.masterKey !== undefined &&\n            crossSigningPrivateKeys.self_signing_key !== undefined &&\n            crossSigningPrivateKeys.userSigningKey !== undefined;\n\n        // If we have cross-signing private keys cached, store them in secret\n        // storage if they are not there already.\n        if (\n            hasPrivateKeys &&\n            (isNewSecretStorageKeyNeeded || !(await secretStorageContainsCrossSigningKeys(this.secretStorage)))\n        ) {\n            this.logger.info(\"bootstrapSecretStorage: cross-signing keys not yet exported; doing so now.\");\n\n            await this.secretStorage.store(\"m.cross_signing.master\", crossSigningPrivateKeys.masterKey);\n            await this.secretStorage.store(\"m.cross_signing.user_signing\", crossSigningPrivateKeys.userSigningKey);\n            await this.secretStorage.store(\"m.cross_signing.self_signing\", crossSigningPrivateKeys.self_signing_key);\n        }\n\n        // likewise with the key backup key: if we have one, store it in secret storage (if it's not already there)\n        // also don't bother storing it if we're about to set up a new backup\n        if (!setupNewKeyBackup) {\n            await this.saveBackupKeyToStorage();\n        } else {\n            await this.resetKeyBackup();\n        }\n    }\n\n    /**\n     * If we have a backup key for the current, trusted backup in cache,\n     * save it to secret storage.\n     */\n    private async saveBackupKeyToStorage(): Promise<void> {\n        const keyBackupInfo = await this.backupManager.getServerBackupInfo();\n        if (!keyBackupInfo || !keyBackupInfo.version) {\n            logger.info(\"Not saving backup key to secret storage: no backup info\");\n            return;\n        }\n\n        const backupKeys: RustSdkCryptoJs.BackupKeys = await this.olmMachine.getBackupKeys();\n        if (!backupKeys.decryptionKey) {\n            logger.info(\"Not saving backup key to secret storage: no backup key\");\n            return;\n        }\n\n        if (!decryptionKeyMatchesKeyBackupInfo(backupKeys.decryptionKey, keyBackupInfo)) {\n            logger.info(\"Not saving backup key to secret storage: decryption key does not match backup info\");\n            return;\n        }\n\n        const backupKeyBase64 = backupKeys.decryptionKey.toBase64();\n\n        await this.secretStorage.store(\"m.megolm_backup.v1\", backupKeyBase64);\n    }\n\n    /**\n     * Add the secretStorage key to the secret storage\n     * - The secret storage key must have the `keyInfo` field filled\n     * - The secret storage key is set as the default key of the secret storage\n     * - Call `cryptoCallbacks.cacheSecretStorageKey` when done\n     *\n     * @param secretStorageKey - The secret storage key to add in the secret storage.\n     */\n    private async addSecretStorageKeyToSecretStorage(secretStorageKey: GeneratedSecretStorageKey): Promise<void> {\n        const secretStorageKeyObject = await this.secretStorage.addKey(SECRET_STORAGE_ALGORITHM_V1_AES, {\n            passphrase: secretStorageKey.keyInfo?.passphrase,\n            name: secretStorageKey.keyInfo?.name,\n            key: secretStorageKey.privateKey,\n        });\n\n        await this.secretStorage.setDefaultKeyId(secretStorageKeyObject.keyId);\n\n        this.cryptoCallbacks.cacheSecretStorageKey?.(\n            secretStorageKeyObject.keyId,\n            secretStorageKeyObject.keyInfo,\n            secretStorageKey.privateKey,\n        );\n    }\n\n    /**\n     * Check if a secret storage AES Key is already added in secret storage\n     *\n     * @returns True if an AES key is in the secret storage\n     */\n    private async secretStorageHasAESKey(): Promise<boolean> {\n        // See if we already have an AES secret-storage key.\n        const secretStorageKeyTuple = await this.secretStorage.getKey();\n\n        if (!secretStorageKeyTuple) return false;\n\n        const [, keyInfo] = secretStorageKeyTuple;\n\n        // Check if the key is an AES key\n        return keyInfo.algorithm === SECRET_STORAGE_ALGORITHM_V1_AES;\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getCrossSigningStatus}\n     */\n    public async getCrossSigningStatus(): Promise<CrossSigningStatus> {\n        const userIdentity: RustSdkCryptoJs.OwnUserIdentity | null = await this.getOlmMachineOrThrow().getIdentity(\n            new RustSdkCryptoJs.UserId(this.userId),\n        );\n\n        const publicKeysOnDevice =\n            Boolean(userIdentity?.masterKey) &&\n            Boolean(userIdentity?.selfSigningKey) &&\n            Boolean(userIdentity?.userSigningKey);\n        userIdentity?.free();\n\n        const privateKeysInSecretStorage = await secretStorageContainsCrossSigningKeys(this.secretStorage);\n        const crossSigningStatus: RustSdkCryptoJs.CrossSigningStatus | null =\n            await this.getOlmMachineOrThrow().crossSigningStatus();\n\n        return {\n            publicKeysOnDevice,\n            privateKeysInSecretStorage,\n            privateKeysCachedLocally: {\n                masterKey: Boolean(crossSigningStatus?.hasMaster),\n                userSigningKey: Boolean(crossSigningStatus?.hasUserSigning),\n                selfSigningKey: Boolean(crossSigningStatus?.hasSelfSigning),\n            },\n        };\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#createRecoveryKeyFromPassphrase}\n     */\n    public async createRecoveryKeyFromPassphrase(password?: string): Promise<GeneratedSecretStorageKey> {\n        if (password) {\n            // Generate the key from the passphrase\n            // first we generate a random salt\n            const salt = secureRandomString(32);\n            // then we derive the key from the passphrase\n            const recoveryKey = await deriveRecoveryKeyFromPassphrase(\n                password,\n                salt,\n                this.RECOVERY_KEY_DERIVATION_ITERATIONS,\n            );\n            return {\n                keyInfo: {\n                    passphrase: {\n                        algorithm: \"m.pbkdf2\",\n                        iterations: this.RECOVERY_KEY_DERIVATION_ITERATIONS,\n                        salt,\n                    },\n                },\n                privateKey: recoveryKey,\n                encodedPrivateKey: encodeRecoveryKey(recoveryKey),\n            };\n        } else {\n            // Using the navigator crypto API to generate the private key\n            const key = new Uint8Array(32);\n            globalThis.crypto.getRandomValues(key);\n            return {\n                privateKey: key,\n                encodedPrivateKey: encodeRecoveryKey(key),\n            };\n        }\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getEncryptionInfoForEvent}.\n     */\n    public async getEncryptionInfoForEvent(event: MatrixEvent): Promise<EventEncryptionInfo | null> {\n        return this.eventDecryptor.getEncryptionInfoForEvent(event);\n    }\n\n    /**\n     * Returns to-device verification requests that are already in progress for the given user id.\n     *\n     * Implementation of {@link CryptoApi#getVerificationRequestsToDeviceInProgress}\n     *\n     * @param userId - the ID of the user to query\n     *\n     * @returns the VerificationRequests that are in progress\n     */\n    public getVerificationRequestsToDeviceInProgress(userId: string): VerificationRequest[] {\n        const requests: RustSdkCryptoJs.VerificationRequest[] = this.olmMachine.getVerificationRequests(\n            new RustSdkCryptoJs.UserId(userId),\n        );\n        return requests\n            .filter((request) => request.roomId === undefined)\n            .map(\n                (request) =>\n                    new RustVerificationRequest(\n                        this.olmMachine,\n                        request,\n                        this.outgoingRequestProcessor,\n                        this._supportedVerificationMethods,\n                    ),\n            );\n    }\n\n    /**\n     * Finds a DM verification request that is already in progress for the given room id\n     *\n     * Implementation of {@link CryptoApi#findVerificationRequestDMInProgress}\n     *\n     * @param roomId - the room to use for verification\n     * @param userId - search the verification request for the given user\n     *\n     * @returns the VerificationRequest that is in progress, if any\n     *\n     */\n    public findVerificationRequestDMInProgress(roomId: string, userId?: string): VerificationRequest | undefined {\n        if (!userId) throw new Error(\"missing userId\");\n\n        const requests: RustSdkCryptoJs.VerificationRequest[] = this.olmMachine.getVerificationRequests(\n            new RustSdkCryptoJs.UserId(userId),\n        );\n\n        // Search for the verification request for the given room id\n        const request = requests.find((request) => request.roomId?.toString() === roomId);\n\n        if (request) {\n            return new RustVerificationRequest(\n                this.olmMachine,\n                request,\n                this.outgoingRequestProcessor,\n                this._supportedVerificationMethods,\n            );\n        }\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#requestVerificationDM}\n     */\n    public async requestVerificationDM(userId: string, roomId: string): Promise<VerificationRequest> {\n        const userIdentity: RustSdkCryptoJs.OtherUserIdentity | undefined = await this.olmMachine.getIdentity(\n            new RustSdkCryptoJs.UserId(userId),\n        );\n\n        if (!userIdentity) throw new Error(`unknown userId ${userId}`);\n\n        try {\n            // Transform the verification methods into rust objects\n            const methods = this._supportedVerificationMethods.map((method) =>\n                verificationMethodIdentifierToMethod(method),\n            );\n            // Get the request content to send to the DM room\n            const verificationEventContent: string = await userIdentity.verificationRequestContent(methods);\n\n            // Send the request content to send to the DM room\n            const eventId = await this.sendVerificationRequestContent(roomId, verificationEventContent);\n\n            // Get a verification request\n            const request: RustSdkCryptoJs.VerificationRequest = await userIdentity.requestVerification(\n                new RustSdkCryptoJs.RoomId(roomId),\n                new RustSdkCryptoJs.EventId(eventId),\n                methods,\n            );\n            return new RustVerificationRequest(\n                this.olmMachine,\n                request,\n                this.outgoingRequestProcessor,\n                this._supportedVerificationMethods,\n            );\n        } finally {\n            userIdentity.free();\n        }\n    }\n\n    /**\n     * Send the verification content to a room\n     * See https://spec.matrix.org/v1.7/client-server-api/#put_matrixclientv3roomsroomidsendeventtypetxnid\n     *\n     * Prefer to use {@link OutgoingRequestProcessor.makeOutgoingRequest} when dealing with {@link RustSdkCryptoJs.RoomMessageRequest}\n     *\n     * @param roomId - the targeted room\n     * @param verificationEventContent - the request body.\n     *\n     * @returns the event id\n     */\n    private async sendVerificationRequestContent(roomId: string, verificationEventContent: string): Promise<string> {\n        const txId = secureRandomString(32);\n        // Send the verification request content to the DM room\n        const { event_id: eventId } = await this.http.authedRequest<{ event_id: string }>(\n            Method.Put,\n            `/_matrix/client/v3/rooms/${encodeURIComponent(roomId)}/send/m.room.message/${encodeURIComponent(txId)}`,\n            undefined,\n            verificationEventContent,\n            {\n                prefix: \"\",\n            },\n        );\n\n        return eventId;\n    }\n\n    /**\n     * The verification methods we offer to the other side during an interactive verification.\n     */\n    private _supportedVerificationMethods: string[] = ALL_VERIFICATION_METHODS;\n\n    /**\n     * Set the verification methods we offer to the other side during an interactive verification.\n     *\n     * If `undefined`, we will offer all the methods supported by the Rust SDK.\n     */\n    public setSupportedVerificationMethods(methods: string[] | undefined): void {\n        // by default, the Rust SDK does not offer `m.qr_code.scan.v1`, but we do want to offer that.\n        this._supportedVerificationMethods = methods ?? ALL_VERIFICATION_METHODS;\n    }\n\n    /**\n     * Send a verification request to our other devices.\n     *\n     * If a verification is already in flight, returns it. Otherwise, initiates a new one.\n     *\n     * Implementation of {@link CryptoApi#requestOwnUserVerification}.\n     *\n     * @returns a VerificationRequest when the request has been sent to the other party.\n     */\n    public async requestOwnUserVerification(): Promise<VerificationRequest> {\n        const userIdentity: RustSdkCryptoJs.OwnUserIdentity | undefined = await this.olmMachine.getIdentity(\n            new RustSdkCryptoJs.UserId(this.userId),\n        );\n        if (userIdentity === undefined) {\n            throw new Error(\"cannot request verification for this device when there is no existing cross-signing key\");\n        }\n\n        try {\n            const [request, outgoingRequest]: [RustSdkCryptoJs.VerificationRequest, RustSdkCryptoJs.ToDeviceRequest] =\n                await userIdentity.requestVerification(\n                    this._supportedVerificationMethods.map(verificationMethodIdentifierToMethod),\n                );\n            await this.outgoingRequestProcessor.makeOutgoingRequest(outgoingRequest);\n            return new RustVerificationRequest(\n                this.olmMachine,\n                request,\n                this.outgoingRequestProcessor,\n                this._supportedVerificationMethods,\n            );\n        } finally {\n            userIdentity.free();\n        }\n    }\n\n    /**\n     * Request an interactive verification with the given device.\n     *\n     * If a verification is already in flight, returns it. Otherwise, initiates a new one.\n     *\n     * Implementation of {@link CryptoApi#requestDeviceVerification}.\n     *\n     * @param userId - ID of the owner of the device to verify\n     * @param deviceId - ID of the device to verify\n     *\n     * @returns a VerificationRequest when the request has been sent to the other party.\n     */\n    public async requestDeviceVerification(userId: string, deviceId: string): Promise<VerificationRequest> {\n        const device: RustSdkCryptoJs.Device | undefined = await this.olmMachine.getDevice(\n            new RustSdkCryptoJs.UserId(userId),\n            new RustSdkCryptoJs.DeviceId(deviceId),\n        );\n\n        if (!device) {\n            throw new Error(\"Not a known device\");\n        }\n\n        try {\n            const [request, outgoingRequest] = device.requestVerification(\n                this._supportedVerificationMethods.map(verificationMethodIdentifierToMethod),\n            );\n            await this.outgoingRequestProcessor.makeOutgoingRequest(outgoingRequest);\n            return new RustVerificationRequest(\n                this.olmMachine,\n                request,\n                this.outgoingRequestProcessor,\n                this._supportedVerificationMethods,\n            );\n        } finally {\n            device.free();\n        }\n    }\n\n    /**\n     * Fetch the backup decryption key we have saved in our store.\n     *\n     * Implementation of {@link CryptoApi#getSessionBackupPrivateKey}.\n     *\n     * @returns the key, if any, or null\n     */\n    public async getSessionBackupPrivateKey(): Promise<Uint8Array | null> {\n        const backupKeys: RustSdkCryptoJs.BackupKeys = await this.olmMachine.getBackupKeys();\n        if (!backupKeys.decryptionKey) return null;\n        return decodeBase64(backupKeys.decryptionKey.toBase64());\n    }\n\n    /**\n     * Store the backup decryption key.\n     *\n     * Implementation of {@link CryptoApi#storeSessionBackupPrivateKey}.\n     *\n     * @param key - the backup decryption key\n     * @param version - the backup version for this key.\n     */\n    public async storeSessionBackupPrivateKey(key: Uint8Array, version?: string): Promise<void> {\n        const base64Key = encodeBase64(key);\n\n        if (!version) {\n            throw new Error(\"storeSessionBackupPrivateKey: version is required\");\n        }\n\n        await this.backupManager.saveBackupDecryptionKey(\n            RustSdkCryptoJs.BackupDecryptionKey.fromBase64(base64Key),\n            version,\n        );\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#loadSessionBackupPrivateKeyFromSecretStorage}.\n     */\n    public async loadSessionBackupPrivateKeyFromSecretStorage(): Promise<void> {\n        const backupKey = await this.secretStorage.get(\"m.megolm_backup.v1\");\n        if (!backupKey) {\n            throw new Error(\"loadSessionBackupPrivateKeyFromSecretStorage: missing decryption key in secret storage\");\n        }\n\n        const keyBackupInfo = await this.backupManager.getServerBackupInfo();\n        if (!keyBackupInfo || !keyBackupInfo.version) {\n            throw new Error(\"loadSessionBackupPrivateKeyFromSecretStorage: unable to get backup version\");\n        }\n\n        const backupDecryptionKey = RustSdkCryptoJs.BackupDecryptionKey.fromBase64(backupKey);\n        if (!decryptionKeyMatchesKeyBackupInfo(backupDecryptionKey, keyBackupInfo)) {\n            throw new Error(\"loadSessionBackupPrivateKeyFromSecretStorage: decryption key does not match backup info\");\n        }\n\n        await this.backupManager.saveBackupDecryptionKey(backupDecryptionKey, keyBackupInfo.version);\n    }\n\n    /**\n     * Get the current status of key backup.\n     *\n     * Implementation of {@link CryptoApi#getActiveSessionBackupVersion}.\n     */\n    public async getActiveSessionBackupVersion(): Promise<string | null> {\n        return await this.backupManager.getActiveBackupVersion();\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#getKeyBackupInfo}.\n     */\n    public async getKeyBackupInfo(): Promise<KeyBackupInfo | null> {\n        return (await this.backupManager.getServerBackupInfo()) || null;\n    }\n\n    /**\n     * Determine if a key backup can be trusted.\n     *\n     * Implementation of {@link CryptoApi#isKeyBackupTrusted}.\n     */\n    public async isKeyBackupTrusted(info: KeyBackupInfo): Promise<BackupTrustInfo> {\n        return await this.backupManager.isKeyBackupTrusted(info);\n    }\n\n    /**\n     * Force a re-check of the key backup and enable/disable it as appropriate.\n     *\n     * Implementation of {@link CryptoApi#checkKeyBackupAndEnable}.\n     */\n    public async checkKeyBackupAndEnable(): Promise<KeyBackupCheck | null> {\n        return await this.backupManager.checkKeyBackupAndEnable(true);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#deleteKeyBackupVersion}.\n     */\n    public async deleteKeyBackupVersion(version: string): Promise<void> {\n        await this.backupManager.deleteKeyBackupVersion(version);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#resetKeyBackup}.\n     */\n    public async resetKeyBackup(): Promise<void> {\n        const backupInfo = await this.backupManager.setupKeyBackup((o) => this.signObject(o));\n\n        // we want to store the private key in 4S\n        // need to check if 4S is set up?\n        if (await this.secretStorageHasAESKey()) {\n            await this.secretStorage.store(\"m.megolm_backup.v1\", backupInfo.decryptionKey.toBase64());\n        }\n\n        // we can check and start async\n        this.checkKeyBackupAndEnable();\n    }\n\n    /**\n     * Signs the given object with the current device and current identity (if available).\n     * As defined in {@link https://spec.matrix.org/v1.8/appendices/#signing-json | Signing JSON}.\n     *\n     * Helper for {@link RustCrypto#resetKeyBackup}.\n     *\n     * @param obj - The object to sign\n     */\n    private async signObject<T extends ISignableObject & object>(obj: T): Promise<void> {\n        const sigs = new Map(Object.entries(obj.signatures || {}));\n        const unsigned = obj.unsigned;\n\n        delete obj.signatures;\n        delete obj.unsigned;\n\n        const userSignatures = sigs.get(this.userId) || {};\n\n        const canonalizedJson = anotherjson.stringify(obj);\n        const signatures: RustSdkCryptoJs.Signatures = await this.olmMachine.sign(canonalizedJson);\n\n        const map = JSON.parse(signatures.asJSON());\n\n        sigs.set(this.userId, { ...userSignatures, ...map[this.userId] });\n\n        if (unsigned !== undefined) obj.unsigned = unsigned;\n        obj.signatures = Object.fromEntries(sigs.entries());\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#restoreKeyBackupWithPassphrase}.\n     */\n    public async restoreKeyBackupWithPassphrase(\n        passphrase: string,\n        opts?: KeyBackupRestoreOpts,\n    ): Promise<KeyBackupRestoreResult> {\n        const backupInfo = await this.backupManager.getServerBackupInfo();\n        if (!backupInfo?.version) {\n            throw new Error(\"No backup info available\");\n        }\n\n        const privateKey = await keyFromAuthData(backupInfo.auth_data, passphrase);\n\n        // Cache the key\n        await this.storeSessionBackupPrivateKey(privateKey, backupInfo.version);\n        return this.restoreKeyBackup(opts);\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#restoreKeyBackup}.\n     */\n    public async restoreKeyBackup(opts?: KeyBackupRestoreOpts): Promise<KeyBackupRestoreResult> {\n        // Get the decryption key from the crypto store\n        const backupKeys: RustSdkCryptoJs.BackupKeys = await this.olmMachine.getBackupKeys();\n        const { decryptionKey, backupVersion } = backupKeys;\n        if (!decryptionKey || !backupVersion) throw new Error(\"No decryption key found in crypto store\");\n\n        const decodedDecryptionKey = decodeBase64(decryptionKey.toBase64());\n\n        const backupInfo = await this.backupManager.requestKeyBackupVersion(backupVersion);\n        if (!backupInfo) throw new Error(`Backup version to restore ${backupVersion} not found on server`);\n\n        const backupDecryptor = await this.getBackupDecryptor(backupInfo, decodedDecryptionKey);\n\n        try {\n            opts?.progressCallback?.({\n                stage: ImportRoomKeyStage.Fetch,\n            });\n\n            return await this.backupManager.restoreKeyBackup(backupVersion, backupDecryptor, opts);\n        } finally {\n            // Free to avoid to keep in memory the decryption key stored in it. To avoid to exposing it to an attacker.\n            backupDecryptor.free();\n        }\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#isDehydrationSupported}.\n     */\n    public async isDehydrationSupported(): Promise<boolean> {\n        return await this.dehydratedDeviceManager.isSupported();\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#startDehydration}.\n     */\n    public async startDehydration(opts: StartDehydrationOpts | boolean = {}): Promise<void> {\n        if (!(await this.isCrossSigningReady()) || !(await this.isSecretStorageReady())) {\n            throw new Error(\"Device dehydration requires cross-signing and secret storage to be set up\");\n        }\n        return await this.dehydratedDeviceManager.start(opts || {});\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#importSecretsBundle}.\n     */\n    public async importSecretsBundle(\n        secrets: Parameters<NonNullable<CryptoApi[\"importSecretsBundle\"]>>[0],\n    ): Promise<void> {\n        const secretsBundle = RustSdkCryptoJs.SecretsBundle.from_json(secrets);\n        await this.getOlmMachineOrThrow().importSecretsBundle(secretsBundle); // this method frees the SecretsBundle\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#exportSecretsBundle}.\n     */\n    public async exportSecretsBundle(): ReturnType<NonNullable<CryptoApi[\"exportSecretsBundle\"]>> {\n        const secretsBundle = await this.getOlmMachineOrThrow().exportSecretsBundle();\n        const secrets = secretsBundle.to_json();\n        secretsBundle.free();\n        return secrets;\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#encryptToDeviceMessages}.\n     */\n    public async encryptToDeviceMessages(\n        eventType: string,\n        devices: { userId: string; deviceId: string }[],\n        payload: ToDevicePayload,\n    ): Promise<ToDeviceBatch> {\n        const logger = new LogSpan(this.logger, \"encryptToDeviceMessages\");\n        const uniqueUsers = new Set(devices.map(({ userId }) => userId));\n\n        // This will ensure we have Olm sessions for all of the users' devices.\n        // However, we only care about some of the devices.\n        // So, perhaps we can optimise this later on.\n        await this.keyClaimManager.ensureSessionsForUsers(\n            logger,\n            Array.from(uniqueUsers).map((userId) => new RustSdkCryptoJs.UserId(userId)),\n        );\n        const batch: ToDeviceBatch = {\n            batch: [],\n            eventType: EventType.RoomMessageEncrypted,\n        };\n\n        await Promise.all(\n            devices.map(async ({ userId, deviceId }) => {\n                const device: RustSdkCryptoJs.Device | undefined = await this.olmMachine.getDevice(\n                    new RustSdkCryptoJs.UserId(userId),\n                    new RustSdkCryptoJs.DeviceId(deviceId),\n                );\n\n                if (device) {\n                    const encryptedPayload = JSON.parse(await device.encryptToDeviceEvent(eventType, payload));\n                    batch.batch.push({\n                        deviceId,\n                        userId,\n                        payload: encryptedPayload,\n                    });\n                } else {\n                    this.logger.warn(`encryptToDeviceMessages: unknown device ${userId}:${deviceId}`);\n                }\n            }),\n        );\n\n        return batch;\n    }\n\n    /**\n     * Implementation of {@link CryptoApi#resetEncryption}.\n     */\n    public async resetEncryption(authUploadDeviceSigningKeys: UIAuthCallback<void>): Promise<void> {\n        this.logger.debug(\"resetEncryption: resetting encryption\");\n\n        // Delete the dehydrated device, since any existing one will be signed\n        // by the wrong cross-signing key\n        this.dehydratedDeviceManager.delete();\n\n        // Disable backup, and delete all the backups from the server\n        await this.backupManager.deleteAllKeyBackupVersions();\n\n        // Remove the stored secrets in the secret storage\n        await this.secretStorage.store(\"m.cross_signing.master\", null);\n        await this.secretStorage.store(\"m.cross_signing.self_signing\", null);\n        await this.secretStorage.store(\"m.cross_signing.user_signing\", null);\n        await this.secretStorage.store(\"m.megolm_backup.v1\", null);\n\n        // Remove the recovery key\n        const defaultKeyId = await this.secretStorage.getDefaultKeyId();\n        if (defaultKeyId) await this.secretStorage.store(`m.secret_storage.key.${defaultKeyId}`, null);\n        // Disable the recovery key and the secret storage\n        await this.secretStorage.setDefaultKeyId(null);\n\n        // Reset the cross-signing keys\n        await this.crossSigningIdentity.bootstrapCrossSigning({\n            setupNewCrossSigning: true,\n            authUploadDeviceSigningKeys,\n        });\n\n        // Create a new key backup\n        await this.resetKeyBackup();\n\n        this.logger.debug(\"resetEncryption: ended\");\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // SyncCryptoCallbacks implementation\n    //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    /**\n     * Apply sync changes to the olm machine\n     * @param events - the received to-device messages\n     * @param oneTimeKeysCounts - the received one time key counts\n     * @param unusedFallbackKeys - the received unused fallback keys\n     * @param devices - the received device list updates\n     * @returns A list of preprocessed to-device messages.\n     */\n    private async receiveSyncChanges({\n        events,\n        oneTimeKeysCounts = new Map<string, number>(),\n        unusedFallbackKeys,\n        devices = new RustSdkCryptoJs.DeviceLists(),\n    }: {\n        events?: IToDeviceEvent[];\n        oneTimeKeysCounts?: Map<string, number>;\n        unusedFallbackKeys?: Set<string>;\n        devices?: RustSdkCryptoJs.DeviceLists;\n    }): Promise<IToDeviceEvent[]> {\n        const result = await logDuration(logger, \"receiveSyncChanges\", async () => {\n            return await this.olmMachine.receiveSyncChanges(\n                events ? JSON.stringify(events) : \"[]\",\n                devices,\n                oneTimeKeysCounts,\n                unusedFallbackKeys,\n            );\n        });\n\n        // receiveSyncChanges returns a JSON-encoded list of decrypted to-device messages.\n        return JSON.parse(result);\n    }\n\n    /** called by the sync loop to preprocess incoming to-device messages\n     *\n     * @param events - the received to-device messages\n     * @returns A list of preprocessed to-device messages.\n     */\n    public async preprocessToDeviceMessages(events: IToDeviceEvent[]): Promise<IToDeviceEvent[]> {\n        // send the received to-device messages into receiveSyncChanges. We have no info on device-list changes,\n        // one-time-keys, or fallback keys, so just pass empty data.\n        const processed = await this.receiveSyncChanges({ events });\n\n        // look for interesting to-device messages\n        for (const message of processed) {\n            if (message.type === EventType.KeyVerificationRequest) {\n                const sender = message.sender;\n                const transactionId = message.content.transaction_id;\n                if (transactionId && sender) {\n                    this.onIncomingKeyVerificationRequest(sender, transactionId);\n                }\n            }\n        }\n        return processed;\n    }\n\n    /** called by the sync loop to process one time key counts and unused fallback keys\n     *\n     * @param oneTimeKeysCounts - the received one time key counts\n     * @param unusedFallbackKeys - the received unused fallback keys\n     */\n    public async processKeyCounts(\n        oneTimeKeysCounts?: Record<string, number>,\n        unusedFallbackKeys?: string[],\n    ): Promise<void> {\n        const mapOneTimeKeysCount = oneTimeKeysCounts && new Map<string, number>(Object.entries(oneTimeKeysCounts));\n        const setUnusedFallbackKeys = unusedFallbackKeys && new Set<string>(unusedFallbackKeys);\n\n        if (mapOneTimeKeysCount !== undefined || setUnusedFallbackKeys !== undefined) {\n            await this.receiveSyncChanges({\n                oneTimeKeysCounts: mapOneTimeKeysCount,\n                unusedFallbackKeys: setUnusedFallbackKeys,\n            });\n        }\n    }\n\n    /** called by the sync loop to process the notification that device lists have\n     * been changed.\n     *\n     * @param deviceLists - device_lists field from /sync\n     */\n    public async processDeviceLists(deviceLists: IDeviceLists): Promise<void> {\n        const devices = new RustSdkCryptoJs.DeviceLists(\n            deviceLists.changed?.map((userId) => new RustSdkCryptoJs.UserId(userId)),\n            deviceLists.left?.map((userId) => new RustSdkCryptoJs.UserId(userId)),\n        );\n        await this.receiveSyncChanges({ devices });\n    }\n\n    /** called by the sync loop on m.room.encrypted events\n     *\n     * @param room - in which the event was received\n     * @param event - encryption event to be processed\n     */\n    public async onCryptoEvent(room: Room, event: MatrixEvent): Promise<void> {\n        const config = event.getContent();\n        const settings = new RustSdkCryptoJs.RoomSettings();\n\n        if (config.algorithm === \"m.megolm.v1.aes-sha2\") {\n            settings.algorithm = RustSdkCryptoJs.EncryptionAlgorithm.MegolmV1AesSha2;\n        } else {\n            // Among other situations, this happens if the crypto state event is redacted.\n            this.logger.warn(`Room ${room.roomId}: ignoring crypto event with invalid algorithm ${config.algorithm}`);\n            return;\n        }\n\n        try {\n            settings.sessionRotationPeriodMs = config.rotation_period_ms;\n            settings.sessionRotationPeriodMessages = config.rotation_period_msgs;\n            await this.olmMachine.setRoomSettings(new RustSdkCryptoJs.RoomId(room.roomId), settings);\n        } catch (e) {\n            this.logger.warn(`Room ${room.roomId}: ignoring crypto event which caused error: ${e}`);\n            return;\n        }\n\n        // If we got this far, the SDK found the event acceptable.\n        // We need to either create or update the active RoomEncryptor.\n        const existingEncryptor = this.roomEncryptors[room.roomId];\n        if (existingEncryptor) {\n            existingEncryptor.onCryptoEvent(config);\n        } else {\n            this.roomEncryptors[room.roomId] = new RoomEncryptor(\n                this.olmMachine,\n                this.keyClaimManager,\n                this.outgoingRequestsManager,\n                room,\n                config,\n            );\n        }\n    }\n\n    /** called by the sync loop after processing each sync.\n     *\n     * TODO: figure out something equivalent for sliding sync.\n     *\n     * @param syncState - information on the completed sync.\n     */\n    public onSyncCompleted(syncState: OnSyncCompletedData): void {\n        // Processing the /sync may have produced new outgoing requests which need sending, so kick off the outgoing\n        // request loop, if it's not already running.\n        this.outgoingRequestsManager.doProcessOutgoingRequests().catch((e) => {\n            this.logger.warn(\"onSyncCompleted: Error processing outgoing requests\", e);\n        });\n    }\n\n    /**\n     * Handle an incoming m.key.verification.request event, received either in-room or in a to-device message.\n     *\n     * @param sender - the sender of the event\n     * @param transactionId - the transaction ID for the verification. For to-device messages, this comes from the\n     *    content of the message; for in-room messages it is the event ID.\n     */\n    private onIncomingKeyVerificationRequest(sender: string, transactionId: string): void {\n        const request: RustSdkCryptoJs.VerificationRequest | undefined = this.olmMachine.getVerificationRequest(\n            new RustSdkCryptoJs.UserId(sender),\n            transactionId,\n        );\n\n        if (request) {\n            this.emit(\n                CryptoEvent.VerificationRequestReceived,\n                new RustVerificationRequest(\n                    this.olmMachine,\n                    request,\n                    this.outgoingRequestProcessor,\n                    this._supportedVerificationMethods,\n                ),\n            );\n        } else {\n            // There are multiple reasons this can happen; probably the most likely is that the event is an\n            // in-room event which is too old.\n            this.logger.info(\n                `Ignoring just-received verification request ${transactionId} which did not start a rust-side verification`,\n            );\n        }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //\n    // Other public functions\n    //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    /** called by the MatrixClient on a room membership event\n     *\n     * @param event - The matrix event which caused this event to fire.\n     * @param member - The member whose RoomMember.membership changed.\n     * @param oldMembership - The previous membership state. Null if it's a new member.\n     */\n    public onRoomMembership(event: MatrixEvent, member: RoomMember, oldMembership?: string): void {\n        const enc = this.roomEncryptors[event.getRoomId()!];\n        if (!enc) {\n            // not encrypting in this room\n            return;\n        }\n        enc.onRoomMembership(member);\n    }\n\n    /** Callback for OlmMachine.registerRoomKeyUpdatedCallback\n     *\n     * Called by the rust-sdk whenever there is an update to (megolm) room keys. We\n     * check if we have any events waiting for the given keys, and schedule them for\n     * a decryption retry if so.\n     *\n     * @param keys - details of the updated keys\n     */\n    public async onRoomKeysUpdated(keys: RustSdkCryptoJs.RoomKeyInfo[]): Promise<void> {\n        for (const key of keys) {\n            this.onRoomKeyUpdated(key);\n        }\n        this.backupManager.maybeUploadKey();\n    }\n\n    private onRoomKeyUpdated(key: RustSdkCryptoJs.RoomKeyInfo): void {\n        if (this.stopped) return;\n        this.logger.debug(\n            `Got update for session ${key.sessionId} from sender ${key.senderKey.toBase64()} in ${key.roomId.toString()}`,\n        );\n        const pendingList = this.eventDecryptor.getEventsPendingRoomKey(key.roomId.toString(), key.sessionId);\n        if (pendingList.length === 0) return;\n\n        this.logger.debug(\n            \"Retrying decryption on events:\",\n            pendingList.map((e) => `${e.getId()}`),\n        );\n\n        // Have another go at decrypting events with this key.\n        //\n        // We don't want to end up blocking the callback from Rust, which could otherwise end up dropping updates,\n        // so we don't wait for the decryption to complete. In any case, there is no need to wait:\n        // MatrixEvent.attemptDecryption ensures that there is only one decryption attempt happening at once,\n        // and deduplicates repeated attempts for the same event.\n        for (const ev of pendingList) {\n            ev.attemptDecryption(this, { isRetry: true }).catch((_e) => {\n                this.logger.info(`Still unable to decrypt event ${ev.getId()} after receiving key`);\n            });\n        }\n    }\n\n    /**\n     * Callback for `OlmMachine.registerRoomKeyWithheldCallback`.\n     *\n     * Called by the rust sdk whenever we are told that a key has been withheld. We see if we had any events that\n     * failed to decrypt for the given session, and update their status if so.\n     *\n     * @param withheld - Details of the withheld sessions.\n     */\n    public async onRoomKeysWithheld(withheld: RustSdkCryptoJs.RoomKeyWithheldInfo[]): Promise<void> {\n        for (const session of withheld) {\n            this.logger.debug(`Got withheld message for session ${session.sessionId} in ${session.roomId.toString()}`);\n            const pendingList = this.eventDecryptor.getEventsPendingRoomKey(\n                session.roomId.toString(),\n                session.sessionId,\n            );\n            if (pendingList.length === 0) return;\n\n            // The easiest way to update the status of the event is to have another go at decrypting it.\n            this.logger.debug(\n                \"Retrying decryption on events:\",\n                pendingList.map((e) => `${e.getId()}`),\n            );\n\n            for (const ev of pendingList) {\n                ev.attemptDecryption(this, { isRetry: true }).catch((_e) => {\n                    // It's somewhat expected that we still can't decrypt here.\n                });\n            }\n        }\n    }\n\n    /**\n     * Callback for `OlmMachine.registerUserIdentityUpdatedCallback`\n     *\n     * Called by the rust-sdk whenever there is an update to any user's cross-signing status. We re-check their trust\n     * status and emit a `UserTrustStatusChanged` event, as well as a `KeysChanged` if it is our own identity that changed.\n     *\n     * @param userId - the user with the updated identity\n     */\n    public async onUserIdentityUpdated(userId: RustSdkCryptoJs.UserId): Promise<void> {\n        const newVerification = await this.getUserVerificationStatus(userId.toString());\n        this.emit(CryptoEvent.UserTrustStatusChanged, userId.toString(), newVerification);\n\n        // If our own user identity has changed, we may now trust the key backup where we did not before.\n        // So, re-check the key backup status and enable it if available.\n        if (userId.toString() === this.userId) {\n            this.emit(CryptoEvent.KeysChanged, {});\n            await this.checkKeyBackupAndEnable();\n        }\n    }\n\n    /**\n     * Callback for `OlmMachine.registerDevicesUpdatedCallback`\n     *\n     * Called when users' devices have updated. Emits `WillUpdateDevices` and `DevicesUpdated`. In the JavaScript\n     * crypto backend, these events are called at separate times, with `WillUpdateDevices` being emitted just before\n     * the devices are saved, and `DevicesUpdated` being emitted just after. But the OlmMachine only gives us\n     * one event, so we emit both events here.\n     *\n     * @param userIds - an array of user IDs of users whose devices have updated.\n     */\n    public async onDevicesUpdated(userIds: string[]): Promise<void> {\n        this.emit(CryptoEvent.WillUpdateDevices, userIds, false);\n        this.emit(CryptoEvent.DevicesUpdated, userIds, false);\n    }\n\n    /**\n     * Handles secret received from the rust secret inbox.\n     *\n     * The gossipped secrets are received using the `m.secret.send` event type\n     * and are guaranteed to have been received over a 1-to-1 Olm\n     * Session from a verified device.\n     *\n     * The only secret currently handled in this way is `m.megolm_backup.v1`.\n     *\n     * @param name - the secret name\n     * @param value - the secret value\n     */\n    private async handleSecretReceived(name: string, value: string): Promise<boolean> {\n        this.logger.debug(`onReceiveSecret: Received secret ${name}`);\n        if (name === \"m.megolm_backup.v1\") {\n            return await this.backupManager.handleBackupSecretReceived(value);\n            // XXX at this point we should probably try to download the backup and import the keys,\n            // or at least retry for the current decryption failures?\n            // Maybe add some signaling when a new secret is received, and let clients handle it?\n            // as it's where the restore from backup APIs are exposed.\n        }\n        return false;\n    }\n\n    /**\n     * Called when a new secret is received in the rust secret inbox.\n     *\n     * Will poll the secret inbox and handle the secrets received.\n     *\n     * @param name - The name of the secret received.\n     */\n    public async checkSecrets(name: string): Promise<void> {\n        const pendingValues: Set<string> = await this.olmMachine.getSecretsFromInbox(name);\n        for (const value of pendingValues) {\n            if (await this.handleSecretReceived(name, value)) {\n                // If we have a valid secret for that name there is no point of processing the other secrets values.\n                // It's probably the same secret shared by another device.\n                break;\n            }\n        }\n\n        // Important to call this after handling the secrets as good hygiene.\n        await this.olmMachine.deleteSecretsFromInbox(name);\n    }\n\n    /**\n     * Handle a live event received via /sync.\n     * See {@link ClientEventHandlerMap#event}\n     *\n     * @param event - live event\n     */\n    public async onLiveEventFromSync(event: MatrixEvent): Promise<void> {\n        // Ignore state event or remote echo\n        // transaction_id is provided in case of remote echo {@link https://spec.matrix.org/v1.7/client-server-api/#local-echo}\n        if (event.isState() || !!event.getUnsigned().transaction_id) return;\n\n        const processEvent = async (evt: MatrixEvent): Promise<void> => {\n            // Process only verification event\n            if (isVerificationEvent(event)) {\n                await this.onKeyVerificationEvent(evt);\n            }\n        };\n\n        // If the event is encrypted of in failure, we wait for decryption\n        if (event.isDecryptionFailure() || event.isEncrypted()) {\n            // 5 mins\n            const TIMEOUT_DELAY = 5 * 60 * 1000;\n\n            // After 5mins, we are not expecting the event to be decrypted\n            const timeoutId = setTimeout(() => event.off(MatrixEventEvent.Decrypted, onDecrypted), TIMEOUT_DELAY);\n\n            const onDecrypted = (decryptedEvent: MatrixEvent, error?: Error): void => {\n                if (error) return;\n\n                clearTimeout(timeoutId);\n                event.off(MatrixEventEvent.Decrypted, onDecrypted);\n                processEvent(decryptedEvent);\n            };\n\n            event.on(MatrixEventEvent.Decrypted, onDecrypted);\n        } else {\n            await processEvent(event);\n        }\n    }\n\n    /**\n     * Handle an in-room key verification event.\n     *\n     * @param event - a key validation request event.\n     */\n    private async onKeyVerificationEvent(event: MatrixEvent): Promise<void> {\n        const roomId = event.getRoomId();\n\n        if (!roomId) {\n            throw new Error(\"missing roomId in the event\");\n        }\n\n        this.logger.debug(\n            `Incoming verification event ${event.getId()} type ${event.getType()} from ${event.getSender()}`,\n        );\n\n        await this.olmMachine.receiveVerificationEvent(\n            JSON.stringify({\n                event_id: event.getId(),\n                type: event.getType(),\n                sender: event.getSender(),\n                state_key: event.getStateKey(),\n                content: event.getContent(),\n                origin_server_ts: event.getTs(),\n            }),\n            new RustSdkCryptoJs.RoomId(roomId),\n        );\n\n        if (\n            event.getType() === EventType.RoomMessage &&\n            event.getContent().msgtype === MsgType.KeyVerificationRequest\n        ) {\n            this.onIncomingKeyVerificationRequest(event.getSender()!, event.getId()!);\n        }\n\n        // that may have caused us to queue up outgoing requests, so make sure we send them.\n        this.outgoingRequestsManager.doProcessOutgoingRequests().catch((e) => {\n            this.logger.warn(\"onKeyVerificationRequest: Error processing outgoing requests\", e);\n        });\n    }\n\n    /**\n     * Returns the cross-signing user identity of the current user.\n     *\n     * Not part of the public crypto-api interface.\n     * Used during migration from legacy js-crypto to update local trust if needed.\n     */\n    public async getOwnIdentity(): Promise<RustSdkCryptoJs.OwnUserIdentity | undefined> {\n        return await this.olmMachine.getIdentity(new RustSdkCryptoJs.UserId(this.userId));\n    }\n}\n\nclass EventDecryptor {\n    /**\n     * Events which we couldn't decrypt due to unknown sessions / indexes.\n     *\n     * Map from roomId to sessionId to Set of MatrixEvents\n     */\n    private eventsPendingKey = new MapWithDefault<string, MapWithDefault<string, Set<MatrixEvent>>>(\n        () => new MapWithDefault<string, Set<MatrixEvent>>(() => new Set()),\n    );\n\n    public constructor(\n        private readonly logger: Logger,\n        private readonly olmMachine: RustSdkCryptoJs.OlmMachine,\n        private readonly perSessionBackupDownloader: PerSessionKeyBackupDownloader,\n    ) {}\n\n    public async attemptEventDecryption(\n        event: MatrixEvent,\n        isolationMode: DeviceIsolationMode,\n    ): Promise<IEventDecryptionResult> {\n        // add the event to the pending list *before* attempting to decrypt.\n        // then, if the key turns up while decryption is in progress (and\n        // decryption fails), we will schedule a retry.\n        // (fixes https://github.com/vector-im/element-web/issues/5001)\n        this.addEventToPendingList(event);\n\n        let trustRequirement;\n\n        switch (isolationMode.kind) {\n            case DeviceIsolationModeKind.AllDevicesIsolationMode:\n                trustRequirement = RustSdkCryptoJs.TrustRequirement.Untrusted;\n                break;\n            case DeviceIsolationModeKind.OnlySignedDevicesIsolationMode:\n                trustRequirement = RustSdkCryptoJs.TrustRequirement.CrossSignedOrLegacy;\n                break;\n        }\n\n        try {\n            const res = (await this.olmMachine.decryptRoomEvent(\n                stringifyEvent(event),\n                new RustSdkCryptoJs.RoomId(event.getRoomId()!),\n                new RustSdkCryptoJs.DecryptionSettings(trustRequirement),\n            )) as RustSdkCryptoJs.DecryptedRoomEvent;\n\n            // Success. We can remove the event from the pending list, if\n            // that hasn't already happened.\n            this.removeEventFromPendingList(event);\n\n            return {\n                clearEvent: JSON.parse(res.event),\n                claimedEd25519Key: res.senderClaimedEd25519Key,\n                senderCurve25519Key: res.senderCurve25519Key,\n                forwardingCurve25519KeyChain: res.forwardingCurve25519KeyChain,\n            };\n        } catch (err) {\n            if (err instanceof RustSdkCryptoJs.MegolmDecryptionError) {\n                this.onMegolmDecryptionError(event, err, await this.perSessionBackupDownloader.getServerBackupInfo());\n            } else {\n                throw new DecryptionError(DecryptionFailureCode.UNKNOWN_ERROR, \"Unknown error\");\n            }\n        }\n    }\n\n    /**\n     * Handle a `MegolmDecryptionError` returned by the rust SDK.\n     *\n     * Fires off a request to the `perSessionBackupDownloader`, if appropriate, and then throws a `DecryptionError`.\n     *\n     * @param event - The event which could not be decrypted.\n     * @param err - The error from the Rust SDK.\n     * @param serverBackupInfo - Details about the current backup from the server. `null` if there is no backup.\n     *     `undefined` if our attempt to check failed.\n     */\n    private onMegolmDecryptionError(\n        event: MatrixEvent,\n        err: RustSdkCryptoJs.MegolmDecryptionError,\n        serverBackupInfo: KeyBackupInfo | null | undefined,\n    ): never {\n        const content = event.getWireContent();\n        const errorDetails = { sender_key: content.sender_key, session_id: content.session_id };\n\n        // If the error looks like it might be recoverable from backup, queue up a request to try that.\n        if (\n            err.code === RustSdkCryptoJs.DecryptionErrorCode.MissingRoomKey ||\n            err.code === RustSdkCryptoJs.DecryptionErrorCode.UnknownMessageIndex\n        ) {\n            this.perSessionBackupDownloader.onDecryptionKeyMissingError(event.getRoomId()!, content.session_id!);\n\n            // If the server is telling us our membership at the time the event\n            // was sent, and it isn't \"join\", we use a different error code.\n            const membership = event.getMembershipAtEvent();\n            if (membership && membership !== KnownMembership.Join && membership !== KnownMembership.Invite) {\n                throw new DecryptionError(\n                    DecryptionFailureCode.HISTORICAL_MESSAGE_USER_NOT_JOINED,\n                    \"This message was sent when we were not a member of the room.\",\n                    errorDetails,\n                );\n            }\n\n            // If the event was sent before this device was created, we use some different error codes.\n            if (event.getTs() <= this.olmMachine.deviceCreationTimeMs) {\n                if (serverBackupInfo === null) {\n                    throw new DecryptionError(\n                        DecryptionFailureCode.HISTORICAL_MESSAGE_NO_KEY_BACKUP,\n                        \"This message was sent before this device logged in, and there is no key backup on the server.\",\n                        errorDetails,\n                    );\n                } else if (!this.perSessionBackupDownloader.isKeyBackupDownloadConfigured()) {\n                    throw new DecryptionError(\n                        DecryptionFailureCode.HISTORICAL_MESSAGE_BACKUP_UNCONFIGURED,\n                        \"This message was sent before this device logged in, and key backup is not working.\",\n                        errorDetails,\n                    );\n                } else {\n                    throw new DecryptionError(\n                        DecryptionFailureCode.HISTORICAL_MESSAGE_WORKING_BACKUP,\n                        \"This message was sent before this device logged in. Key backup is working, but we still do not (yet) have the key.\",\n                        errorDetails,\n                    );\n                }\n            }\n        }\n\n        // If we got a withheld code, expose that.\n        if (err.maybe_withheld) {\n            // Unfortunately the Rust SDK API doesn't let us distinguish between different withheld cases, other than\n            // by string-matching.\n            const failureCode =\n                err.maybe_withheld === \"The sender has disabled encrypting to unverified devices.\"\n                    ? DecryptionFailureCode.MEGOLM_KEY_WITHHELD_FOR_UNVERIFIED_DEVICE\n                    : DecryptionFailureCode.MEGOLM_KEY_WITHHELD;\n            throw new DecryptionError(failureCode, err.maybe_withheld, errorDetails);\n        }\n\n        switch (err.code) {\n            case RustSdkCryptoJs.DecryptionErrorCode.MissingRoomKey:\n                throw new DecryptionError(\n                    DecryptionFailureCode.MEGOLM_UNKNOWN_INBOUND_SESSION_ID,\n                    \"The sender's device has not sent us the keys for this message.\",\n                    errorDetails,\n                );\n\n            case RustSdkCryptoJs.DecryptionErrorCode.UnknownMessageIndex:\n                throw new DecryptionError(\n                    DecryptionFailureCode.OLM_UNKNOWN_MESSAGE_INDEX,\n                    \"The sender's device has not sent us the keys for this message at this index.\",\n                    errorDetails,\n                );\n\n            case RustSdkCryptoJs.DecryptionErrorCode.SenderIdentityVerificationViolation:\n                // We're refusing to decrypt due to not trusting the sender,\n                // rather than failing to decrypt due to lack of keys, so we\n                // don't need to keep it on the pending list.\n                this.removeEventFromPendingList(event);\n                throw new DecryptionError(\n                    DecryptionFailureCode.SENDER_IDENTITY_PREVIOUSLY_VERIFIED,\n                    \"The sender identity is unverified, but was previously verified.\",\n                );\n\n            case RustSdkCryptoJs.DecryptionErrorCode.UnknownSenderDevice:\n                // We're refusing to decrypt due to not trusting the sender,\n                // rather than failing to decrypt due to lack of keys, so we\n                // don't need to keep it on the pending list.\n                this.removeEventFromPendingList(event);\n                throw new DecryptionError(\n                    DecryptionFailureCode.UNKNOWN_SENDER_DEVICE,\n                    \"The sender device is not known.\",\n                );\n\n            case RustSdkCryptoJs.DecryptionErrorCode.UnsignedSenderDevice:\n                // We're refusing to decrypt due to not trusting the sender,\n                // rather than failing to decrypt due to lack of keys, so we\n                // don't need to keep it on the pending list.\n                this.removeEventFromPendingList(event);\n                throw new DecryptionError(\n                    DecryptionFailureCode.UNSIGNED_SENDER_DEVICE,\n                    \"The sender identity is not cross-signed.\",\n                );\n\n            // We don't map MismatchedIdentityKeys for now, as there is no equivalent in legacy.\n            // Just put it on the `UNKNOWN_ERROR` bucket.\n            default:\n                throw new DecryptionError(DecryptionFailureCode.UNKNOWN_ERROR, err.description, errorDetails);\n        }\n    }\n\n    public async getEncryptionInfoForEvent(event: MatrixEvent): Promise<EventEncryptionInfo | null> {\n        if (!event.getClearContent() || event.isDecryptionFailure()) {\n            // not successfully decrypted\n            return null;\n        }\n\n        // special-case outgoing events, which the rust crypto-sdk will barf on\n        if (event.status !== null) {\n            return { shieldColour: EventShieldColour.NONE, shieldReason: null };\n        }\n\n        const encryptionInfo = await this.olmMachine.getRoomEventEncryptionInfo(\n            stringifyEvent(event),\n            new RustSdkCryptoJs.RoomId(event.getRoomId()!),\n        );\n\n        return rustEncryptionInfoToJsEncryptionInfo(this.logger, encryptionInfo);\n    }\n\n    /**\n     * Look for events which are waiting for a given megolm session\n     *\n     * Returns a list of events which were encrypted by `session` and could not be decrypted\n     */\n    public getEventsPendingRoomKey(roomId: string, sessionId: string): MatrixEvent[] {\n        const roomPendingEvents = this.eventsPendingKey.get(roomId);\n        if (!roomPendingEvents) return [];\n\n        const sessionPendingEvents = roomPendingEvents.get(sessionId);\n        if (!sessionPendingEvents) return [];\n\n        return [...sessionPendingEvents];\n    }\n\n    /**\n     * Add an event to the list of those awaiting their session keys.\n     */\n    private addEventToPendingList(event: MatrixEvent): void {\n        const roomId = event.getRoomId();\n        // We shouldn't have events without a room id here.\n        if (!roomId) return;\n\n        const roomPendingEvents = this.eventsPendingKey.getOrCreate(roomId);\n        const sessionPendingEvents = roomPendingEvents.getOrCreate(event.getWireContent().session_id);\n        sessionPendingEvents.add(event);\n    }\n\n    /**\n     * Remove an event from the list of those awaiting their session keys.\n     */\n    private removeEventFromPendingList(event: MatrixEvent): void {\n        const roomId = event.getRoomId();\n        if (!roomId) return;\n\n        const roomPendingEvents = this.eventsPendingKey.getOrCreate(roomId);\n        if (!roomPendingEvents) return;\n\n        const sessionPendingEvents = roomPendingEvents.get(event.getWireContent().session_id);\n        if (!sessionPendingEvents) return;\n\n        sessionPendingEvents.delete(event);\n\n        // also clean up the higher-level maps if they are now empty\n        if (sessionPendingEvents.size === 0) {\n            roomPendingEvents.delete(event.getWireContent().session_id);\n            if (roomPendingEvents.size === 0) {\n                this.eventsPendingKey.delete(roomId);\n            }\n        }\n    }\n}\n\nfunction stringifyEvent(event: MatrixEvent): string {\n    return JSON.stringify({\n        event_id: event.getId(),\n        type: event.getWireType(),\n        sender: event.getSender(),\n        state_key: event.getStateKey(),\n        content: event.getWireContent(),\n        origin_server_ts: event.getTs(),\n    });\n}\n\nfunction rustEncryptionInfoToJsEncryptionInfo(\n    logger: Logger,\n    encryptionInfo: RustSdkCryptoJs.EncryptionInfo | undefined,\n): EventEncryptionInfo | null {\n    if (encryptionInfo === undefined) {\n        // not decrypted here\n        return null;\n    }\n\n    // TODO: use strict shield semantics.\n    const shieldState = encryptionInfo.shieldState(false);\n\n    let shieldColour: EventShieldColour;\n    switch (shieldState.color) {\n        case RustSdkCryptoJs.ShieldColor.Grey:\n            shieldColour = EventShieldColour.GREY;\n            break;\n        case RustSdkCryptoJs.ShieldColor.None:\n            shieldColour = EventShieldColour.NONE;\n            break;\n        default:\n            shieldColour = EventShieldColour.RED;\n    }\n\n    let shieldReason: EventShieldReason | null;\n    switch (shieldState.code) {\n        case undefined:\n        case null:\n            shieldReason = null;\n            break;\n        case RustSdkCryptoJs.ShieldStateCode.AuthenticityNotGuaranteed:\n            shieldReason = EventShieldReason.AUTHENTICITY_NOT_GUARANTEED;\n            break;\n        case RustSdkCryptoJs.ShieldStateCode.UnknownDevice:\n            shieldReason = EventShieldReason.UNKNOWN_DEVICE;\n            break;\n        case RustSdkCryptoJs.ShieldStateCode.UnsignedDevice:\n            shieldReason = EventShieldReason.UNSIGNED_DEVICE;\n            break;\n        case RustSdkCryptoJs.ShieldStateCode.UnverifiedIdentity:\n            shieldReason = EventShieldReason.UNVERIFIED_IDENTITY;\n            break;\n        case RustSdkCryptoJs.ShieldStateCode.SentInClear:\n            shieldReason = EventShieldReason.SENT_IN_CLEAR;\n            break;\n        case RustSdkCryptoJs.ShieldStateCode.VerificationViolation:\n            shieldReason = EventShieldReason.VERIFICATION_VIOLATION;\n            break;\n    }\n\n    return { shieldColour, shieldReason };\n}\n\ntype CryptoEvents = (typeof CryptoEvent)[keyof typeof CryptoEvent];\ntype RustCryptoEvents = Exclude<CryptoEvents, CryptoEvent.LegacyCryptoStoreMigrationProgress>;\n"],"mappings":"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","ignoreList":[]}