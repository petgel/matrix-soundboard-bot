{"version":3,"file":"sliding-sync-sdk.js","names":["_room","require","_logger","utils","_interopRequireWildcard","_eventTimeline","_client","_sync","_httpApi","_slidingSync","_event","_roomState","_roomMember","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","FAILED_SYNC_ERROR_THRESHOLD","ExtensionE2EE","constructor","crypto","name","when","ExtensionState","PreProcess","onRequest","isInitial","undefined","enabled","onResponse","data","device_lists","processDeviceLists","processKeyCounts","device_one_time_keys_count","onSyncCompleted","ExtensionToDevice","client","cryptoCallbacks","_defineProperty2","extReq","since","nextBatch","cancelledKeyVerificationTxns","events","length","preprocessToDeviceMessages","map","getEventMapper","toDeviceEvent","getType","txnId","getContent","push","forEach","content","msgtype","logger","log","getSender","includes","flagCancelled","emit","ClientEvent","ToDeviceEvent","next_batch","ExtensionAccountData","PostProcess","global","processGlobalAccountData","roomId","rooms","accountDataEvents","mapEvents","room","getRoom","warn","addAccountData","e","Event","globalAccountData","prevEventsMap","reduce","m","c","store","getAccountData","storeAccountDataEvents","accountDataEvent","EventType","PushRules","rules","setPushRules","prevEvent","AccountData","ExtensionTyping","processEphemeralEvents","ExtensionReceipts","SlidingSyncSdk","slidingSync","opts","syncOpts","defaultClientOpts","defaultSyncApiOpts","getNotifTimelineSet","reEmitter","reEmit","RoomEvent","Timeline","TimelineReset","on","SlidingSyncEvent","Lifecycle","onLifecycle","bind","RoomData","onRoomData","extensions","ext","registerExtension","roomData","initial","debug","_createAndReEmitRoom","processRoomData","state","resp","err","SlidingSyncState","Complete","purgeNotifications","lastPos","updateSyncState","SyncState","Prepared","oldSyncToken","nextSyncToken","pos","catchingUp","fromCache","Syncing","RequestFinished","failCount","Error","Reconnecting","error","MatrixError","shouldAbortSync","syncLeftRooms","peek","_roomId","stopPeeking","getSyncState","syncState","getSyncStateData","_this$syncStateData","syncStateData","createRoom","timelineSupport","Room","getUserId","lazyLoadMembers","pendingEventOrdering","Name","Redaction","RedactionCancelled","Receipt","Tags","LocalEchoUpdated","MyMembership","registerStateListeners","currentState","RoomStateEvent","Events","Members","NewMember","Update","event","member","_this$client$getUser","user","getUser","userId","RoomMemberEvent","Typing","PowerLevel","Membership","errcode","stop","ensureNameEvent","stateEvents","required_state","timelineEvents","timeline","ephemeralEvents","knownEvents","Set","getLiveTimeline","getEvents","add","getId","oldEvents","newEvents","seenKnownEvent","i","recvEvent","unshift","addEventsToTimeline","prev_batch","encrypted","isRoomEncrypted","notification_count","setUnreadNotificationCount","NotificationCountType","Total","highlight_count","getUnreadNotificationCount","Highlight","Number","isInteger","invited_count","setInvitedMemberCount","joined_count","setJoinedMemberCount","invite_state","inviteStateEvents","injectRoomEvents","recalculate","storeRoom","updateMyMembership","_roomData$prev_batch","setPaginationToken","EventTimeline","BACKWARDS","num_live","addEphemeralEvents","addNotifications","processRoomEvent","isState","RoomEncryption","onCryptoEvent","promiseMapSeries","decryptCriticalEvents","stateEventList","timelineEventList","numLive","liveTimeline","timelineWasEmpty","ev","getPushActionsForEvent","initialiseState","oldState","setStateEvents","liveTimelineEvents","slice","addLiveEvents","resolveInvites","resolveInvitesToProfiles","getMembersWithMembership","requestedProfileInfo","promise","Promise","resolve","avatar_url","avatarUrl","displayname","displayName","getProfileInfo","then","info","inviteEvent","membership","setMembershipEvent","_err","retryImmediately","sync","isGuest","result","getPushRules","pushRules","start","newState","old","Sync","timelineEvent","pushActions","notify","tweaks","highlight","notifEvents","sort","a","b","getTs","_this$client$getNotif","addLiveEvent","exports","stateEvent","type","RoomName","state_key","event_id","sender","origin_server_ts","Date","getTime","decrypt","mapper","room_id","ephEvents"],"sources":["../src/sliding-sync-sdk.ts"],"sourcesContent":["/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport type { SyncCryptoCallbacks } from \"./common-crypto/CryptoBackend\";\nimport { NotificationCountType, Room, RoomEvent } from \"./models/room\";\nimport { logger } from \"./logger\";\nimport * as utils from \"./utils\";\nimport { EventTimeline } from \"./models/event-timeline\";\nimport { ClientEvent, IStoredClientOpts, MatrixClient } from \"./client\";\nimport {\n    ISyncStateData,\n    SyncState,\n    _createAndReEmitRoom,\n    SyncApiOptions,\n    defaultClientOpts,\n    defaultSyncApiOpts,\n} from \"./sync\";\nimport { MatrixEvent } from \"./models/event\";\nimport { Crypto } from \"./crypto\";\nimport { IMinimalEvent, IRoomEvent, IStateEvent, IStrippedState, ISyncResponse } from \"./sync-accumulator\";\nimport { MatrixError } from \"./http-api\";\nimport {\n    Extension,\n    ExtensionState,\n    MSC3575RoomData,\n    MSC3575SlidingSyncResponse,\n    SlidingSync,\n    SlidingSyncEvent,\n    SlidingSyncState,\n} from \"./sliding-sync\";\nimport { EventType } from \"./@types/event\";\nimport { IPushRules } from \"./@types/PushRules\";\nimport { RoomStateEvent } from \"./models/room-state\";\nimport { RoomMemberEvent } from \"./models/room-member\";\n\n// Number of consecutive failed syncs that will lead to a syncState of ERROR as opposed\n// to RECONNECTING. This is needed to inform the client of server issues when the\n// keepAlive is successful but the server /sync fails.\nconst FAILED_SYNC_ERROR_THRESHOLD = 3;\n\ntype ExtensionE2EERequest = {\n    enabled: boolean;\n};\n\ntype ExtensionE2EEResponse = Pick<\n    ISyncResponse,\n    | \"device_lists\"\n    | \"device_one_time_keys_count\"\n    | \"device_unused_fallback_key_types\"\n    | \"org.matrix.msc2732.device_unused_fallback_key_types\"\n>;\n\nclass ExtensionE2EE implements Extension<ExtensionE2EERequest, ExtensionE2EEResponse> {\n    public constructor(private readonly crypto: Crypto) {}\n\n    public name(): string {\n        return \"e2ee\";\n    }\n\n    public when(): ExtensionState {\n        return ExtensionState.PreProcess;\n    }\n\n    public onRequest(isInitial: boolean): ExtensionE2EERequest | undefined {\n        if (!isInitial) {\n            return undefined;\n        }\n        return {\n            enabled: true, // this is sticky so only send it on the initial request\n        };\n    }\n\n    public async onResponse(data: ExtensionE2EEResponse): Promise<void> {\n        // Handle device list updates\n        if (data.device_lists) {\n            await this.crypto.processDeviceLists(data.device_lists);\n        }\n\n        // Handle one_time_keys_count and unused_fallback_key_types\n        await this.crypto.processKeyCounts(\n            data.device_one_time_keys_count,\n            data[\"device_unused_fallback_key_types\"] || data[\"org.matrix.msc2732.device_unused_fallback_key_types\"],\n        );\n\n        this.crypto.onSyncCompleted({});\n    }\n}\n\ntype ExtensionToDeviceRequest = {\n    since?: string;\n    limit?: number;\n    enabled?: boolean;\n};\n\ntype ExtensionToDeviceResponse = {\n    events: Required<ISyncResponse>[\"to_device\"][\"events\"];\n    next_batch: string | null;\n};\n\nclass ExtensionToDevice implements Extension<ExtensionToDeviceRequest, ExtensionToDeviceResponse> {\n    private nextBatch: string | null = null;\n\n    public constructor(private readonly client: MatrixClient, private readonly cryptoCallbacks?: SyncCryptoCallbacks) {}\n\n    public name(): string {\n        return \"to_device\";\n    }\n\n    public when(): ExtensionState {\n        return ExtensionState.PreProcess;\n    }\n\n    public onRequest(isInitial: boolean): ExtensionToDeviceRequest {\n        const extReq: ExtensionToDeviceRequest = {\n            since: this.nextBatch !== null ? this.nextBatch : undefined,\n        };\n        if (isInitial) {\n            extReq[\"limit\"] = 100;\n            extReq[\"enabled\"] = true;\n        }\n        return extReq;\n    }\n\n    public async onResponse(data: ExtensionToDeviceResponse): Promise<void> {\n        const cancelledKeyVerificationTxns: string[] = [];\n        let events = data[\"events\"] || [];\n        if (events.length > 0 && this.cryptoCallbacks) {\n            events = await this.cryptoCallbacks.preprocessToDeviceMessages(events);\n        }\n        events\n            .map(this.client.getEventMapper())\n            .map((toDeviceEvent) => {\n                // map is a cheap inline forEach\n                // We want to flag m.key.verification.start events as cancelled\n                // if there's an accompanying m.key.verification.cancel event, so\n                // we pull out the transaction IDs from the cancellation events\n                // so we can flag the verification events as cancelled in the loop\n                // below.\n                if (toDeviceEvent.getType() === \"m.key.verification.cancel\") {\n                    const txnId: string | undefined = toDeviceEvent.getContent()[\"transaction_id\"];\n                    if (txnId) {\n                        cancelledKeyVerificationTxns.push(txnId);\n                    }\n                }\n\n                // as mentioned above, .map is a cheap inline forEach, so return\n                // the unmodified event.\n                return toDeviceEvent;\n            })\n            .forEach((toDeviceEvent) => {\n                const content = toDeviceEvent.getContent();\n                if (toDeviceEvent.getType() == \"m.room.message\" && content.msgtype == \"m.bad.encrypted\") {\n                    // the mapper already logged a warning.\n                    logger.log(\"Ignoring undecryptable to-device event from \" + toDeviceEvent.getSender());\n                    return;\n                }\n\n                if (\n                    toDeviceEvent.getType() === \"m.key.verification.start\" ||\n                    toDeviceEvent.getType() === \"m.key.verification.request\"\n                ) {\n                    const txnId = content[\"transaction_id\"];\n                    if (cancelledKeyVerificationTxns.includes(txnId)) {\n                        toDeviceEvent.flagCancelled();\n                    }\n                }\n\n                this.client.emit(ClientEvent.ToDeviceEvent, toDeviceEvent);\n            });\n\n        this.nextBatch = data.next_batch;\n    }\n}\n\ntype ExtensionAccountDataRequest = {\n    enabled: boolean;\n};\n\ntype ExtensionAccountDataResponse = {\n    global: IMinimalEvent[];\n    rooms: Record<string, IMinimalEvent[]>;\n};\n\nclass ExtensionAccountData implements Extension<ExtensionAccountDataRequest, ExtensionAccountDataResponse> {\n    public constructor(private readonly client: MatrixClient) {}\n\n    public name(): string {\n        return \"account_data\";\n    }\n\n    public when(): ExtensionState {\n        return ExtensionState.PostProcess;\n    }\n\n    public onRequest(isInitial: boolean): ExtensionAccountDataRequest | undefined {\n        if (!isInitial) {\n            return undefined;\n        }\n        return {\n            enabled: true,\n        };\n    }\n\n    public onResponse(data: ExtensionAccountDataResponse): void {\n        if (data.global && data.global.length > 0) {\n            this.processGlobalAccountData(data.global);\n        }\n\n        for (const roomId in data.rooms) {\n            const accountDataEvents = mapEvents(this.client, roomId, data.rooms[roomId]);\n            const room = this.client.getRoom(roomId);\n            if (!room) {\n                logger.warn(\"got account data for room but room doesn't exist on client:\", roomId);\n                continue;\n            }\n            room.addAccountData(accountDataEvents);\n            accountDataEvents.forEach((e) => {\n                this.client.emit(ClientEvent.Event, e);\n            });\n        }\n    }\n\n    private processGlobalAccountData(globalAccountData: IMinimalEvent[]): void {\n        const events = mapEvents(this.client, undefined, globalAccountData);\n        const prevEventsMap = events.reduce<Record<string, MatrixEvent | undefined>>((m, c) => {\n            m[c.getType()] = this.client.store.getAccountData(c.getType());\n            return m;\n        }, {});\n        this.client.store.storeAccountDataEvents(events);\n        events.forEach((accountDataEvent) => {\n            // Honour push rules that come down the sync stream but also\n            // honour push rules that were previously cached. Base rules\n            // will be updated when we receive push rules via getPushRules\n            // (see sync) before syncing over the network.\n            if (accountDataEvent.getType() === EventType.PushRules) {\n                const rules = accountDataEvent.getContent<IPushRules>();\n                this.client.setPushRules(rules);\n            }\n            const prevEvent = prevEventsMap[accountDataEvent.getType()];\n            this.client.emit(ClientEvent.AccountData, accountDataEvent, prevEvent);\n            return accountDataEvent;\n        });\n    }\n}\n\ntype ExtensionTypingRequest = {\n    enabled: boolean;\n};\n\ntype ExtensionTypingResponse = {\n    rooms: Record<string, IMinimalEvent>;\n};\n\nclass ExtensionTyping implements Extension<ExtensionTypingRequest, ExtensionTypingResponse> {\n    public constructor(private readonly client: MatrixClient) {}\n\n    public name(): string {\n        return \"typing\";\n    }\n\n    public when(): ExtensionState {\n        return ExtensionState.PostProcess;\n    }\n\n    public onRequest(isInitial: boolean): ExtensionTypingRequest | undefined {\n        if (!isInitial) {\n            return undefined; // don't send a JSON object for subsequent requests, we don't need to.\n        }\n        return {\n            enabled: true,\n        };\n    }\n\n    public onResponse(data: ExtensionTypingResponse): void {\n        if (!data?.rooms) {\n            return;\n        }\n\n        for (const roomId in data.rooms) {\n            processEphemeralEvents(this.client, roomId, [data.rooms[roomId]]);\n        }\n    }\n}\n\ntype ExtensionReceiptsRequest = {\n    enabled: boolean;\n};\n\ntype ExtensionReceiptsResponse = {\n    rooms: Record<string, IMinimalEvent>;\n};\n\nclass ExtensionReceipts implements Extension<ExtensionReceiptsRequest, ExtensionReceiptsResponse> {\n    public constructor(private readonly client: MatrixClient) {}\n\n    public name(): string {\n        return \"receipts\";\n    }\n\n    public when(): ExtensionState {\n        return ExtensionState.PostProcess;\n    }\n\n    public onRequest(isInitial: boolean): ExtensionReceiptsRequest | undefined {\n        if (isInitial) {\n            return {\n                enabled: true,\n            };\n        }\n        return undefined; // don't send a JSON object for subsequent requests, we don't need to.\n    }\n\n    public onResponse(data: ExtensionReceiptsResponse): void {\n        if (!data?.rooms) {\n            return;\n        }\n\n        for (const roomId in data.rooms) {\n            processEphemeralEvents(this.client, roomId, [data.rooms[roomId]]);\n        }\n    }\n}\n\n/**\n * A copy of SyncApi such that it can be used as a drop-in replacement for sync v2. For the actual\n * sliding sync API, see sliding-sync.ts or the class SlidingSync.\n */\nexport class SlidingSyncSdk {\n    private readonly opts: IStoredClientOpts;\n    private readonly syncOpts: SyncApiOptions;\n    private syncState: SyncState | null = null;\n    private syncStateData?: ISyncStateData;\n    private lastPos: string | null = null;\n    private failCount = 0;\n    private notifEvents: MatrixEvent[] = []; // accumulator of sync events in the current sync response\n\n    public constructor(\n        private readonly slidingSync: SlidingSync,\n        private readonly client: MatrixClient,\n        opts?: IStoredClientOpts,\n        syncOpts?: SyncApiOptions,\n    ) {\n        this.opts = defaultClientOpts(opts);\n        this.syncOpts = defaultSyncApiOpts(syncOpts);\n\n        if (client.getNotifTimelineSet()) {\n            client.reEmitter.reEmit(client.getNotifTimelineSet()!, [RoomEvent.Timeline, RoomEvent.TimelineReset]);\n        }\n\n        this.slidingSync.on(SlidingSyncEvent.Lifecycle, this.onLifecycle.bind(this));\n        this.slidingSync.on(SlidingSyncEvent.RoomData, this.onRoomData.bind(this));\n        const extensions: Extension<any, any>[] = [\n            new ExtensionToDevice(this.client, this.syncOpts.cryptoCallbacks),\n            new ExtensionAccountData(this.client),\n            new ExtensionTyping(this.client),\n            new ExtensionReceipts(this.client),\n        ];\n        if (this.syncOpts.crypto) {\n            extensions.push(new ExtensionE2EE(this.syncOpts.crypto));\n        }\n        extensions.forEach((ext) => {\n            this.slidingSync.registerExtension(ext);\n        });\n    }\n\n    private onRoomData(roomId: string, roomData: MSC3575RoomData): void {\n        let room = this.client.store.getRoom(roomId);\n        if (!room) {\n            if (!roomData.initial) {\n                logger.debug(\"initial flag not set but no stored room exists for room \", roomId, roomData);\n                return;\n            }\n            room = _createAndReEmitRoom(this.client, roomId, this.opts);\n        }\n        this.processRoomData(this.client, room, roomData);\n    }\n\n    private onLifecycle(state: SlidingSyncState, resp: MSC3575SlidingSyncResponse | null, err?: Error): void {\n        if (err) {\n            logger.debug(\"onLifecycle\", state, err);\n        }\n        switch (state) {\n            case SlidingSyncState.Complete:\n                this.purgeNotifications();\n                if (!resp) {\n                    break;\n                }\n                // Element won't stop showing the initial loading spinner unless we fire SyncState.Prepared\n                if (!this.lastPos) {\n                    this.updateSyncState(SyncState.Prepared, {\n                        oldSyncToken: undefined,\n                        nextSyncToken: resp.pos,\n                        catchingUp: false,\n                        fromCache: false,\n                    });\n                }\n                // Conversely, Element won't show the room list unless there is at least 1x SyncState.Syncing\n                // so hence for the very first sync we will fire prepared then immediately syncing.\n                this.updateSyncState(SyncState.Syncing, {\n                    oldSyncToken: this.lastPos!,\n                    nextSyncToken: resp.pos,\n                    catchingUp: false,\n                    fromCache: false,\n                });\n                this.lastPos = resp.pos;\n                break;\n            case SlidingSyncState.RequestFinished:\n                if (err) {\n                    this.failCount += 1;\n                    this.updateSyncState(\n                        this.failCount > FAILED_SYNC_ERROR_THRESHOLD ? SyncState.Error : SyncState.Reconnecting,\n                        {\n                            error: new MatrixError(err),\n                        },\n                    );\n                    if (this.shouldAbortSync(new MatrixError(err))) {\n                        return; // shouldAbortSync actually stops syncing too so we don't need to do anything.\n                    }\n                } else {\n                    this.failCount = 0;\n                }\n                break;\n        }\n    }\n\n    /**\n     * Sync rooms the user has left.\n     * @returns Resolved when they've been added to the store.\n     */\n    public async syncLeftRooms(): Promise<Room[]> {\n        return []; // TODO\n    }\n\n    /**\n     * Peek into a room. This will result in the room in question being synced so it\n     * is accessible via getRooms(). Live updates for the room will be provided.\n     * @param roomId - The room ID to peek into.\n     * @returns A promise which resolves once the room has been added to the\n     * store.\n     */\n    public async peek(_roomId: string): Promise<Room> {\n        return null!; // TODO\n    }\n\n    /**\n     * Stop polling for updates in the peeked room. NOPs if there is no room being\n     * peeked.\n     */\n    public stopPeeking(): void {\n        // TODO\n    }\n\n    /**\n     * Returns the current state of this sync object\n     * @see MatrixClient#event:\"sync\"\n     */\n    public getSyncState(): SyncState | null {\n        return this.syncState;\n    }\n\n    /**\n     * Returns the additional data object associated with\n     * the current sync state, or null if there is no\n     * such data.\n     * Sync errors, if available, are put in the 'error' key of\n     * this object.\n     */\n    public getSyncStateData(): ISyncStateData | null {\n        return this.syncStateData ?? null;\n    }\n\n    // Helper functions which set up JS SDK structs are below and are identical to the sync v2 counterparts\n\n    public createRoom(roomId: string): Room {\n        // XXX cargoculted from sync.ts\n        const { timelineSupport } = this.client;\n        const room = new Room(roomId, this.client, this.client.getUserId()!, {\n            lazyLoadMembers: this.opts.lazyLoadMembers,\n            pendingEventOrdering: this.opts.pendingEventOrdering,\n            timelineSupport,\n        });\n        this.client.reEmitter.reEmit(room, [\n            RoomEvent.Name,\n            RoomEvent.Redaction,\n            RoomEvent.RedactionCancelled,\n            RoomEvent.Receipt,\n            RoomEvent.Tags,\n            RoomEvent.LocalEchoUpdated,\n            RoomEvent.AccountData,\n            RoomEvent.MyMembership,\n            RoomEvent.Timeline,\n            RoomEvent.TimelineReset,\n        ]);\n        this.registerStateListeners(room);\n        return room;\n    }\n\n    private registerStateListeners(room: Room): void {\n        // XXX cargoculted from sync.ts\n        // we need to also re-emit room state and room member events, so hook it up\n        // to the client now. We need to add a listener for RoomState.members in\n        // order to hook them correctly.\n        this.client.reEmitter.reEmit(room.currentState, [\n            RoomStateEvent.Events,\n            RoomStateEvent.Members,\n            RoomStateEvent.NewMember,\n            RoomStateEvent.Update,\n        ]);\n        room.currentState.on(RoomStateEvent.NewMember, (event, state, member) => {\n            member.user = this.client.getUser(member.userId) ?? undefined;\n            this.client.reEmitter.reEmit(member, [\n                RoomMemberEvent.Name,\n                RoomMemberEvent.Typing,\n                RoomMemberEvent.PowerLevel,\n                RoomMemberEvent.Membership,\n            ]);\n        });\n    }\n\n    /*\n    private deregisterStateListeners(room: Room): void { // XXX cargoculted from sync.ts\n        // could do with a better way of achieving this.\n        room.currentState.removeAllListeners(RoomStateEvent.Events);\n        room.currentState.removeAllListeners(RoomStateEvent.Members);\n        room.currentState.removeAllListeners(RoomStateEvent.NewMember);\n    } */\n\n    private shouldAbortSync(error: MatrixError): boolean {\n        if (error.errcode === \"M_UNKNOWN_TOKEN\") {\n            // The logout already happened, we just need to stop.\n            logger.warn(\"Token no longer valid - assuming logout\");\n            this.stop();\n            this.updateSyncState(SyncState.Error, { error });\n            return true;\n        }\n        return false;\n    }\n\n    private async processRoomData(client: MatrixClient, room: Room, roomData: MSC3575RoomData): Promise<void> {\n        roomData = ensureNameEvent(client, room.roomId, roomData);\n        const stateEvents = mapEvents(this.client, room.roomId, roomData.required_state);\n        // Prevent events from being decrypted ahead of time\n        // this helps large account to speed up faster\n        // room::decryptCriticalEvent is in charge of decrypting all the events\n        // required for a client to function properly\n        let timelineEvents = mapEvents(this.client, room.roomId, roomData.timeline, false);\n        const ephemeralEvents: MatrixEvent[] = []; // TODO this.mapSyncEventsFormat(joinObj.ephemeral);\n\n        // TODO: handle threaded / beacon events\n\n        if (roomData.initial) {\n            // we should not know about any of these timeline entries if this is a genuinely new room.\n            // If we do, then we've effectively done scrollback (e.g requesting timeline_limit: 1 for\n            // this room, then timeline_limit: 50).\n            const knownEvents = new Set<string>();\n            room.getLiveTimeline()\n                .getEvents()\n                .forEach((e) => {\n                    knownEvents.add(e.getId()!);\n                });\n            // all unknown events BEFORE a known event must be scrollback e.g:\n            //       D E   <-- what we know\n            // A B C D E F <-- what we just received\n            // means:\n            // A B C       <-- scrollback\n            //       D E   <-- dupes\n            //           F <-- new event\n            // We bucket events based on if we have seen a known event yet.\n            const oldEvents: MatrixEvent[] = [];\n            const newEvents: MatrixEvent[] = [];\n            let seenKnownEvent = false;\n            for (let i = timelineEvents.length - 1; i >= 0; i--) {\n                const recvEvent = timelineEvents[i];\n                if (knownEvents.has(recvEvent.getId()!)) {\n                    seenKnownEvent = true;\n                    continue; // don't include this event, it's a dupe\n                }\n                if (seenKnownEvent) {\n                    // old -> new\n                    oldEvents.push(recvEvent);\n                } else {\n                    // old -> new\n                    newEvents.unshift(recvEvent);\n                }\n            }\n            timelineEvents = newEvents;\n            if (oldEvents.length > 0) {\n                // old events are scrollback, insert them now\n                room.addEventsToTimeline(oldEvents, true, room.getLiveTimeline(), roomData.prev_batch);\n            }\n        }\n\n        const encrypted = this.client.isRoomEncrypted(room.roomId);\n        // we do this first so it's correct when any of the events fire\n        if (roomData.notification_count != null) {\n            room.setUnreadNotificationCount(NotificationCountType.Total, roomData.notification_count);\n        }\n\n        if (roomData.highlight_count != null) {\n            // We track unread notifications ourselves in encrypted rooms, so don't\n            // bother setting it here. We trust our calculations better than the\n            // server's for this case, and therefore will assume that our non-zero\n            // count is accurate.\n            if (!encrypted || (encrypted && room.getUnreadNotificationCount(NotificationCountType.Highlight) <= 0)) {\n                room.setUnreadNotificationCount(NotificationCountType.Highlight, roomData.highlight_count);\n            }\n        }\n\n        if (Number.isInteger(roomData.invited_count)) {\n            room.currentState.setInvitedMemberCount(roomData.invited_count!);\n        }\n        if (Number.isInteger(roomData.joined_count)) {\n            room.currentState.setJoinedMemberCount(roomData.joined_count!);\n        }\n\n        if (roomData.invite_state) {\n            const inviteStateEvents = mapEvents(this.client, room.roomId, roomData.invite_state);\n            this.injectRoomEvents(room, inviteStateEvents);\n            if (roomData.initial) {\n                room.recalculate();\n                this.client.store.storeRoom(room);\n                this.client.emit(ClientEvent.Room, room);\n            }\n            inviteStateEvents.forEach((e) => {\n                this.client.emit(ClientEvent.Event, e);\n            });\n            room.updateMyMembership(\"invite\");\n            return;\n        }\n\n        if (roomData.initial) {\n            // set the back-pagination token. Do this *before* adding any\n            // events so that clients can start back-paginating.\n            room.getLiveTimeline().setPaginationToken(roomData.prev_batch ?? null, EventTimeline.BACKWARDS);\n        }\n\n        /* TODO\n        else if (roomData.limited) {\n\n            let limited = true;\n\n            // we've got a limited sync, so we *probably* have a gap in the\n            // timeline, so should reset. But we might have been peeking or\n            // paginating and already have some of the events, in which\n            // case we just want to append any subsequent events to the end\n            // of the existing timeline.\n            //\n            // This is particularly important in the case that we already have\n            // *all* of the events in the timeline - in that case, if we reset\n            // the timeline, we'll end up with an entirely empty timeline,\n            // which we'll try to paginate but not get any new events (which\n            // will stop us linking the empty timeline into the chain).\n            //\n            for (let i = timelineEvents.length - 1; i >= 0; i--) {\n                const eventId = timelineEvents[i].getId();\n                if (room.getTimelineForEvent(eventId)) {\n                    logger.debug(\"Already have event \" + eventId + \" in limited \" +\n                        \"sync - not resetting\");\n                    limited = false;\n\n                    // we might still be missing some of the events before i;\n                    // we don't want to be adding them to the end of the\n                    // timeline because that would put them out of order.\n                    timelineEvents.splice(0, i);\n\n                    // XXX: there's a problem here if the skipped part of the\n                    // timeline modifies the state set in stateEvents, because\n                    // we'll end up using the state from stateEvents rather\n                    // than the later state from timelineEvents. We probably\n                    // need to wind stateEvents forward over the events we're\n                    // skipping.\n                    break;\n                }\n            }\n\n            if (limited) {\n                room.resetLiveTimeline(\n                    roomData.prev_batch,\n                    null, // TODO this.syncOpts.canResetEntireTimeline(room.roomId) ? null : syncEventData.oldSyncToken,\n                );\n\n                // We have to assume any gap in any timeline is\n                // reason to stop incrementally tracking notifications and\n                // reset the timeline.\n                this.client.resetNotifTimelineSet();\n                this.registerStateListeners(room);\n            }\n        } */\n\n        this.injectRoomEvents(room, stateEvents, timelineEvents, roomData.num_live);\n\n        // we deliberately don't add ephemeral events to the timeline\n        room.addEphemeralEvents(ephemeralEvents);\n\n        // local fields must be set before any async calls because call site assumes\n        // synchronous execution prior to emitting SlidingSyncState.Complete\n        room.updateMyMembership(\"join\");\n\n        room.recalculate();\n        if (roomData.initial) {\n            client.store.storeRoom(room);\n            client.emit(ClientEvent.Room, room);\n        }\n\n        // check if any timeline events should bing and add them to the notifEvents array:\n        // we'll purge this once we've fully processed the sync response\n        this.addNotifications(timelineEvents);\n\n        const processRoomEvent = async (e: MatrixEvent): Promise<void> => {\n            client.emit(ClientEvent.Event, e);\n            if (e.isState() && e.getType() == EventType.RoomEncryption && this.syncOpts.cryptoCallbacks) {\n                await this.syncOpts.cryptoCallbacks.onCryptoEvent(room, e);\n            }\n        };\n\n        await utils.promiseMapSeries(stateEvents, processRoomEvent);\n        await utils.promiseMapSeries(timelineEvents, processRoomEvent);\n        ephemeralEvents.forEach(function (e) {\n            client.emit(ClientEvent.Event, e);\n        });\n\n        // Decrypt only the last message in all rooms to make sure we can generate a preview\n        // And decrypt all events after the recorded read receipt to ensure an accurate\n        // notification count\n        room.decryptCriticalEvents();\n    }\n\n    /**\n     * Injects events into a room's model.\n     * @param stateEventList - A list of state events. This is the state\n     * at the *START* of the timeline list if it is supplied.\n     * @param timelineEventList - A list of timeline events. Lower index\n     * is earlier in time. Higher index is later.\n     * @param numLive - the number of events in timelineEventList which just happened,\n     * supplied from the server.\n     */\n    public injectRoomEvents(\n        room: Room,\n        stateEventList: MatrixEvent[],\n        timelineEventList?: MatrixEvent[],\n        numLive?: number,\n    ): void {\n        timelineEventList = timelineEventList || [];\n        stateEventList = stateEventList || [];\n        numLive = numLive || 0;\n\n        // If there are no events in the timeline yet, initialise it with\n        // the given state events\n        const liveTimeline = room.getLiveTimeline();\n        const timelineWasEmpty = liveTimeline.getEvents().length == 0;\n        if (timelineWasEmpty) {\n            // Passing these events into initialiseState will freeze them, so we need\n            // to compute and cache the push actions for them now, otherwise sync dies\n            // with an attempt to assign to read only property.\n            // XXX: This is pretty horrible and is assuming all sorts of behaviour from\n            // these functions that it shouldn't be. We should probably either store the\n            // push actions cache elsewhere so we can freeze MatrixEvents, or otherwise\n            // find some solution where MatrixEvents are immutable but allow for a cache\n            // field.\n            for (const ev of stateEventList) {\n                this.client.getPushActionsForEvent(ev);\n            }\n            liveTimeline.initialiseState(stateEventList);\n        }\n\n        // If the timeline wasn't empty, we process the state events here: they're\n        // defined as updates to the state before the start of the timeline, so this\n        // starts to roll the state forward.\n        // XXX: That's what we *should* do, but this can happen if we were previously\n        // peeking in a room, in which case we obviously do *not* want to add the\n        // state events here onto the end of the timeline. Historically, the js-sdk\n        // has just set these new state events on the old and new state. This seems\n        // very wrong because there could be events in the timeline that diverge the\n        // state, in which case this is going to leave things out of sync. However,\n        // for now I think it;s best to behave the same as the code has done previously.\n        if (!timelineWasEmpty) {\n            // XXX: As above, don't do this...\n            //room.addLiveEvents(stateEventList || []);\n            // Do this instead...\n            room.oldState.setStateEvents(stateEventList);\n            room.currentState.setStateEvents(stateEventList);\n        }\n\n        // the timeline is broken into 'live' events which just happened and normal timeline events\n        // which are still to be appended to the end of the live timeline but happened a while ago.\n        // The live events are marked as fromCache=false to ensure that downstream components know\n        // this is a live event, not historical (from a remote server cache).\n\n        let liveTimelineEvents: MatrixEvent[] = [];\n        if (numLive > 0) {\n            // last numLive events are live\n            liveTimelineEvents = timelineEventList.slice(-1 * numLive);\n            // everything else is not live\n            timelineEventList = timelineEventList.slice(0, -1 * liveTimelineEvents.length);\n        }\n\n        // execute the timeline events. This will continue to diverge the current state\n        // if the timeline has any state events in it.\n        // This also needs to be done before running push rules on the events as they need\n        // to be decorated with sender etc.\n        room.addLiveEvents(timelineEventList, {\n            fromCache: true,\n        });\n        if (liveTimelineEvents.length > 0) {\n            room.addLiveEvents(liveTimelineEvents, {\n                fromCache: false,\n            });\n        }\n\n        room.recalculate();\n\n        // resolve invites now we have set the latest state\n        this.resolveInvites(room);\n    }\n\n    private resolveInvites(room: Room): void {\n        if (!room || !this.opts.resolveInvitesToProfiles) {\n            return;\n        }\n        const client = this.client;\n        // For each invited room member we want to give them a displayname/avatar url\n        // if they have one (the m.room.member invites don't contain this).\n        room.getMembersWithMembership(\"invite\").forEach(function (member) {\n            if (member.requestedProfileInfo) return;\n            member.requestedProfileInfo = true;\n            // try to get a cached copy first.\n            const user = client.getUser(member.userId);\n            let promise: ReturnType<MatrixClient[\"getProfileInfo\"]>;\n            if (user) {\n                promise = Promise.resolve({\n                    avatar_url: user.avatarUrl,\n                    displayname: user.displayName,\n                });\n            } else {\n                promise = client.getProfileInfo(member.userId);\n            }\n            promise.then(\n                function (info) {\n                    // slightly naughty by doctoring the invite event but this means all\n                    // the code paths remain the same between invite/join display name stuff\n                    // which is a worthy trade-off for some minor pollution.\n                    const inviteEvent = member.events.member!;\n                    if (inviteEvent.getContent().membership !== \"invite\") {\n                        // between resolving and now they have since joined, so don't clobber\n                        return;\n                    }\n                    inviteEvent.getContent().avatar_url = info.avatar_url;\n                    inviteEvent.getContent().displayname = info.displayname;\n                    // fire listeners\n                    member.setMembershipEvent(inviteEvent, room.currentState);\n                },\n                function (_err) {\n                    // OH WELL.\n                },\n            );\n        });\n    }\n\n    public retryImmediately(): boolean {\n        return true;\n    }\n\n    /**\n     * Main entry point. Blocks until stop() is called.\n     */\n    public async sync(): Promise<void> {\n        logger.debug(\"Sliding sync init loop\");\n\n        //   1) We need to get push rules so we can check if events should bing as we get\n        //      them from /sync.\n        while (!this.client.isGuest()) {\n            try {\n                logger.debug(\"Getting push rules...\");\n                const result = await this.client.getPushRules();\n                logger.debug(\"Got push rules\");\n                this.client.pushRules = result;\n                break;\n            } catch (err) {\n                logger.error(\"Getting push rules failed\", err);\n                if (this.shouldAbortSync(<MatrixError>err)) {\n                    return;\n                }\n            }\n        }\n\n        // start syncing\n        await this.slidingSync.start();\n    }\n\n    /**\n     * Stops the sync object from syncing.\n     */\n    public stop(): void {\n        logger.debug(\"SyncApi.stop\");\n        this.slidingSync.stop();\n    }\n\n    /**\n     * Sets the sync state and emits an event to say so\n     * @param newState - The new state string\n     * @param data - Object of additional data to emit in the event\n     */\n    private updateSyncState(newState: SyncState, data?: ISyncStateData): void {\n        const old = this.syncState;\n        this.syncState = newState;\n        this.syncStateData = data;\n        this.client.emit(ClientEvent.Sync, this.syncState, old, data);\n    }\n\n    /**\n     * Takes a list of timelineEvents and adds and adds to notifEvents\n     * as appropriate.\n     * This must be called after the room the events belong to has been stored.\n     *\n     * @param timelineEventList - A list of timeline events. Lower index\n     * is earlier in time. Higher index is later.\n     */\n    private addNotifications(timelineEventList: MatrixEvent[]): void {\n        // gather our notifications into this.notifEvents\n        if (!this.client.getNotifTimelineSet()) {\n            return;\n        }\n        for (const timelineEvent of timelineEventList) {\n            const pushActions = this.client.getPushActionsForEvent(timelineEvent);\n            if (pushActions && pushActions.notify && pushActions.tweaks && pushActions.tweaks.highlight) {\n                this.notifEvents.push(timelineEvent);\n            }\n        }\n    }\n\n    /**\n     * Purge any events in the notifEvents array. Used after a /sync has been complete.\n     * This should not be called at a per-room scope (e.g in onRoomData) because otherwise the ordering\n     * will be messed up e.g room A gets a bing, room B gets a newer bing, but both in the same /sync\n     * response. If we purge at a per-room scope then we could process room B before room A leading to\n     * room B appearing earlier in the notifications timeline, even though it has the higher origin_server_ts.\n     */\n    private purgeNotifications(): void {\n        this.notifEvents.sort(function (a, b) {\n            return a.getTs() - b.getTs();\n        });\n        this.notifEvents.forEach((event) => {\n            this.client.getNotifTimelineSet()?.addLiveEvent(event);\n        });\n        this.notifEvents = [];\n    }\n}\n\nfunction ensureNameEvent(client: MatrixClient, roomId: string, roomData: MSC3575RoomData): MSC3575RoomData {\n    // make sure m.room.name is in required_state if there is a name, replacing anything previously\n    // there if need be. This ensures clients transparently 'calculate' the right room name. Native\n    // sliding sync clients should just read the \"name\" field.\n    if (!roomData.name) {\n        return roomData;\n    }\n    for (const stateEvent of roomData.required_state) {\n        if (stateEvent.type === EventType.RoomName && stateEvent.state_key === \"\") {\n            stateEvent.content = {\n                name: roomData.name,\n            };\n            return roomData;\n        }\n    }\n    roomData.required_state.push({\n        event_id: \"$fake-sliding-sync-name-event-\" + roomId,\n        state_key: \"\",\n        type: EventType.RoomName,\n        content: {\n            name: roomData.name,\n        },\n        sender: client.getUserId()!,\n        origin_server_ts: new Date().getTime(),\n    });\n    return roomData;\n}\n\ntype TaggedEvent = (IStrippedState | IRoomEvent | IStateEvent | IMinimalEvent) & { room_id?: string };\n\n// Helper functions which set up JS SDK structs are below and are identical to the sync v2 counterparts,\n// just outside the class.\nfunction mapEvents(client: MatrixClient, roomId: string | undefined, events: object[], decrypt = true): MatrixEvent[] {\n    const mapper = client.getEventMapper({ decrypt });\n    return (events as TaggedEvent[]).map(function (e) {\n        e.room_id = roomId;\n        return mapper(e);\n    });\n}\n\nfunction processEphemeralEvents(client: MatrixClient, roomId: string, ephEvents: IMinimalEvent[]): void {\n    const ephemeralEvents = mapEvents(client, roomId, ephEvents);\n    const room = client.getRoom(roomId);\n    if (!room) {\n        logger.warn(\"got ephemeral events for room but room doesn't exist on client:\", roomId);\n        return;\n    }\n    room.addEphemeralEvents(ephemeralEvents);\n    ephemeralEvents.forEach((e) => {\n        client.emit(ClientEvent.Event, e);\n    });\n}\n"],"mappings":"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"}