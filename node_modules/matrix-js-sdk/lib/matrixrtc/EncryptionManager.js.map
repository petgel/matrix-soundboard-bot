{"version":3,"file":"EncryptionManager.js","names":["logger","rootLogger","secureRandomBase64Url","decodeBase64","encodeUnpaddedBase64","safeGetRetryAfterMs","EventType","getChild","EncryptionManager","updateEncryptionKeyThrottle","_this$joinConfig$upda","_this$joinConfig","joinConfig","makeKeyDelay","_this$joinConfig$make","_this$joinConfig2","useKeyDelay","_this$joinConfig$useK","_this$joinConfig3","constructor","client","room","getMemberships","onEncryptionKeysChanged","_this","_defineProperty","Set","Map","counters","roomEventEncryptionKeysSent","roomEventEncryptionKeysReceived","totals","roomEventEncryptionKeysReceivedTotalAge","m","sender","getUserId","deviceId","getDeviceId","_ref","_asyncToGenerator","indexToSend","keysEventUpdateTimeout","undefined","clearTimeout","lastEncryptionKeyUpdateRequest","Date","now","joined","info","concat","userId","Error","myKeys","getKeysForParticipant","warn","currentEncryptionKeyIndex","keyIndexToSend","keyToSend","content","keys","index","key","device_id","call_id","sent_ts","statistics","sendEvent","roomId","CallEncryptionKeysPrefix","debug","length","encryptionKeys","error","matrixError","event","cancelPendingEvent","resendDelay","setTimeout","sendEncryptionKeysEvent","_x","apply","arguments","getSender","getContent","callId","Array","isArray","age","getTs","encryptionKey","encryptionKeyIndex","setEncryptionKey","manageMediaKeys","makeNewKeyTimeout","newKeyIndex","makeNewSenderKey","getEncryptionKeys","join","_this$joinConfig$mana","_this$joinConfig4","_this$joinConfig5","requestSendCurrentKey","leave","set","getParticipantId","t","setNewKeyTimeouts","clear","onMembershipsUpdate","oldMemberships","oldMembershipIds","filter","isMyMembership","map","getParticipantIdFromMembership","newMembershipIds","anyLeft","from","some","x","has","anyJoined","oldFingerprints","lastMembershipFingerprints","storeLastMembershipFingerprints","onRotateKeyTimeout","newFingerprints","candidateUpdates","delayBeforeUse","getNewEncryptionKeyIndex","_this$encryptionKeys$","get","entry","createdTs","encryptionKeyString","timestamp","keyBin","participantId","participantKeys","existingKeyAtIndex","keysEqual","useKeyTimeout","delete","add","a","b","every","i"],"sources":["../../src/matrixrtc/EncryptionManager.ts"],"sourcesContent":["import { type MatrixClient } from \"../client.ts\";\nimport { logger as rootLogger } from \"../logger.ts\";\nimport { type MatrixEvent } from \"../models/event.ts\";\nimport { type Room } from \"../models/room.ts\";\nimport { type EncryptionConfig } from \"./MatrixRTCSession.ts\";\nimport { secureRandomBase64Url } from \"../randomstring.ts\";\nimport { type EncryptionKeysEventContent } from \"./types.ts\";\nimport { decodeBase64, encodeUnpaddedBase64 } from \"../base64.ts\";\nimport { type MatrixError, safeGetRetryAfterMs } from \"../http-api/errors.ts\";\nimport { type CallMembership } from \"./CallMembership.ts\";\nimport { EventType } from \"../@types/event.ts\";\nconst logger = rootLogger.getChild(\"MatrixRTCSession\");\n\n/**\n * A type collecting call encryption statistics for a session.\n */\nexport type Statistics = {\n    counters: {\n        /**\n         * The number of times we have sent a room event containing encryption keys.\n         */\n        roomEventEncryptionKeysSent: number;\n        /**\n         * The number of times we have received a room event containing encryption keys.\n         */\n        roomEventEncryptionKeysReceived: number;\n    };\n    totals: {\n        /**\n         * The total age (in milliseconds) of all room events containing encryption keys that we have received.\n         * We track the total age so that we can later calculate the average age of all keys received.\n         */\n        roomEventEncryptionKeysReceivedTotalAge: number;\n    };\n};\n\n/**\n * This interface is for testing and for making it possible to interchange the encryption manager.\n * @internal\n */\nexport interface IEncryptionManager {\n    join(joinConfig: EncryptionConfig | undefined): void;\n    leave(): void;\n    onMembershipsUpdate(oldMemberships: CallMembership[]): void;\n    /**\n     * Process `m.call.encryption_keys` events to track the encryption keys for call participants.\n     * This should be called each time the relevant event is received from a room timeline.\n     * If the event is malformed then it will be logged and ignored.\n     *\n     * @param event the event to process\n     */\n    onCallEncryptionEventReceived(event: MatrixEvent): void;\n    getEncryptionKeys(): Map<string, Array<{ key: Uint8Array; timestamp: number }>>;\n    statistics: Statistics;\n}\n\n/**\n * This class implements the IEncryptionManager interface,\n * and takes care of managing the encryption keys of all rtc members:\n *  - generate new keys for the local user and send them to other participants\n *  - track all keys of all other members and update livekit.\n *\n * @internal\n */\nexport class EncryptionManager implements IEncryptionManager {\n    private manageMediaKeys = false;\n    private keysEventUpdateTimeout?: ReturnType<typeof setTimeout>;\n    private makeNewKeyTimeout?: ReturnType<typeof setTimeout>;\n    private setNewKeyTimeouts = new Set<ReturnType<typeof setTimeout>>();\n\n    private get updateEncryptionKeyThrottle(): number {\n        return this.joinConfig?.updateEncryptionKeyThrottle ?? 3_000;\n    }\n    private get makeKeyDelay(): number {\n        return this.joinConfig?.makeKeyDelay ?? 3_000;\n    }\n    private get useKeyDelay(): number {\n        return this.joinConfig?.useKeyDelay ?? 5_000;\n    }\n\n    private encryptionKeys = new Map<string, Array<{ key: Uint8Array; timestamp: number }>>();\n    private lastEncryptionKeyUpdateRequest?: number;\n\n    // We use this to store the last membership fingerprints we saw, so we can proactively re-send encryption keys\n    // if it looks like a membership has been updated.\n    private lastMembershipFingerprints: Set<string> | undefined;\n\n    private currentEncryptionKeyIndex = -1;\n\n    public statistics: Statistics = {\n        counters: {\n            roomEventEncryptionKeysSent: 0,\n            roomEventEncryptionKeysReceived: 0,\n        },\n        totals: {\n            roomEventEncryptionKeysReceivedTotalAge: 0,\n        },\n    };\n    private joinConfig: EncryptionConfig | undefined;\n\n    public constructor(\n        private client: Pick<MatrixClient, \"sendEvent\" | \"getDeviceId\" | \"getUserId\" | \"cancelPendingEvent\">,\n        private room: Pick<Room, \"roomId\">,\n        private getMemberships: () => CallMembership[],\n        private onEncryptionKeysChanged: (\n            keyBin: Uint8Array<ArrayBufferLike>,\n            encryptionKeyIndex: number,\n            participantId: string,\n        ) => void,\n    ) {}\n\n    public getEncryptionKeys(): Map<string, Array<{ key: Uint8Array; timestamp: number }>> {\n        return this.encryptionKeys;\n    }\n    private joined = false;\n    public join(joinConfig: EncryptionConfig): void {\n        this.joinConfig = joinConfig;\n        this.joined = true;\n        this.manageMediaKeys = this.joinConfig?.manageMediaKeys ?? this.manageMediaKeys;\n        if (this.joinConfig?.manageMediaKeys) {\n            this.makeNewSenderKey();\n            this.requestSendCurrentKey();\n        }\n    }\n\n    public leave(): void {\n        const userId = this.client.getUserId();\n        const deviceId = this.client.getDeviceId();\n\n        if (!userId) throw new Error(\"No userId\");\n        if (!deviceId) throw new Error(\"No deviceId\");\n        // clear our encryption keys as we're done with them now (we'll\n        // make new keys if we rejoin). We leave keys for other participants\n        // as they may still be using the same ones.\n        this.encryptionKeys.set(getParticipantId(userId, deviceId), []);\n\n        if (this.makeNewKeyTimeout !== undefined) {\n            clearTimeout(this.makeNewKeyTimeout);\n            this.makeNewKeyTimeout = undefined;\n        }\n        for (const t of this.setNewKeyTimeouts) {\n            clearTimeout(t);\n        }\n        this.setNewKeyTimeouts.clear();\n\n        this.manageMediaKeys = false;\n        this.joined = false;\n    }\n    // TODO deduplicate this method. It also is in MatrixRTCSession.\n    private isMyMembership = (m: CallMembership): boolean =>\n        m.sender === this.client.getUserId() && m.deviceId === this.client.getDeviceId();\n\n    public onMembershipsUpdate(oldMemberships: CallMembership[]): void {\n        if (this.manageMediaKeys && this.joined) {\n            const oldMembershipIds = new Set(\n                oldMemberships.filter((m) => !this.isMyMembership(m)).map(getParticipantIdFromMembership),\n            );\n            const newMembershipIds = new Set(\n                this.getMemberships()\n                    .filter((m) => !this.isMyMembership(m))\n                    .map(getParticipantIdFromMembership),\n            );\n\n            // We can use https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/symmetricDifference\n            // for this once available\n            const anyLeft = Array.from(oldMembershipIds).some((x) => !newMembershipIds.has(x));\n            const anyJoined = Array.from(newMembershipIds).some((x) => !oldMembershipIds.has(x));\n\n            const oldFingerprints = this.lastMembershipFingerprints;\n            // always store the fingerprints of these latest memberships\n            this.storeLastMembershipFingerprints();\n\n            if (anyLeft) {\n                if (this.makeNewKeyTimeout) {\n                    // existing rotation in progress, so let it complete\n                } else {\n                    logger.debug(`Member(s) have left: queueing sender key rotation`);\n                    this.makeNewKeyTimeout = setTimeout(this.onRotateKeyTimeout, this.makeKeyDelay);\n                }\n            } else if (anyJoined) {\n                logger.debug(`New member(s) have joined: re-sending keys`);\n                this.requestSendCurrentKey();\n            } else if (oldFingerprints) {\n                // does it look like any of the members have updated their memberships?\n                const newFingerprints = this.lastMembershipFingerprints!;\n\n                // We can use https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/symmetricDifference\n                // for this once available\n                const candidateUpdates =\n                    Array.from(oldFingerprints).some((x) => !newFingerprints.has(x)) ||\n                    Array.from(newFingerprints).some((x) => !oldFingerprints.has(x));\n                if (candidateUpdates) {\n                    logger.debug(`Member(s) have updated/reconnected: re-sending keys to everyone`);\n                    this.requestSendCurrentKey();\n                }\n            }\n        }\n    }\n\n    /**\n     * Generate a new sender key and add it at the next available index\n     * @param delayBeforeUse - If true, wait for a short period before setting the key for the\n     *                         media encryptor to use. If false, set the key immediately.\n     * @returns The index of the new key\n     */\n    private makeNewSenderKey(delayBeforeUse = false): number {\n        const userId = this.client.getUserId();\n        const deviceId = this.client.getDeviceId();\n\n        if (!userId) throw new Error(\"No userId\");\n        if (!deviceId) throw new Error(\"No deviceId\");\n\n        const encryptionKey = secureRandomBase64Url(16);\n        const encryptionKeyIndex = this.getNewEncryptionKeyIndex();\n        logger.info(\"Generated new key at index \" + encryptionKeyIndex);\n        this.setEncryptionKey(userId, deviceId, encryptionKeyIndex, encryptionKey, Date.now(), delayBeforeUse);\n        return encryptionKeyIndex;\n    }\n\n    /**\n     * Requests that we resend our current keys to the room. May send a keys event immediately\n     * or queue for alter if one has already been sent recently.\n     */\n    private requestSendCurrentKey(): void {\n        if (!this.manageMediaKeys) return;\n\n        if (\n            this.lastEncryptionKeyUpdateRequest &&\n            this.lastEncryptionKeyUpdateRequest + this.updateEncryptionKeyThrottle > Date.now()\n        ) {\n            logger.info(\"Last encryption key event sent too recently: postponing\");\n            if (this.keysEventUpdateTimeout === undefined) {\n                this.keysEventUpdateTimeout = setTimeout(\n                    () => void this.sendEncryptionKeysEvent(),\n                    this.updateEncryptionKeyThrottle,\n                );\n            }\n            return;\n        }\n\n        void this.sendEncryptionKeysEvent();\n    }\n\n    /**\n     * Get the known encryption keys for a given participant device.\n     *\n     * @param userId the user ID of the participant\n     * @param deviceId the device ID of the participant\n     * @returns The encryption keys for the given participant, or undefined if they are not known.\n     */\n    private getKeysForParticipant(userId: string, deviceId: string): Array<Uint8Array> | undefined {\n        return this.encryptionKeys.get(getParticipantId(userId, deviceId))?.map((entry) => entry.key);\n    }\n\n    /**\n     * Re-sends the encryption keys room event\n     */\n    private sendEncryptionKeysEvent = async (indexToSend?: number): Promise<void> => {\n        if (this.keysEventUpdateTimeout !== undefined) {\n            clearTimeout(this.keysEventUpdateTimeout);\n            this.keysEventUpdateTimeout = undefined;\n        }\n        this.lastEncryptionKeyUpdateRequest = Date.now();\n\n        if (!this.joined) return;\n\n        logger.info(`Sending encryption keys event. indexToSend=${indexToSend}`);\n\n        const userId = this.client.getUserId();\n        const deviceId = this.client.getDeviceId();\n\n        if (!userId) throw new Error(\"No userId\");\n        if (!deviceId) throw new Error(\"No deviceId\");\n\n        const myKeys = this.getKeysForParticipant(userId, deviceId);\n\n        if (!myKeys) {\n            logger.warn(\"Tried to send encryption keys event but no keys found!\");\n            return;\n        }\n\n        if (typeof indexToSend !== \"number\" && this.currentEncryptionKeyIndex === -1) {\n            logger.warn(\"Tried to send encryption keys event but no current key index found!\");\n            return;\n        }\n\n        const keyIndexToSend = indexToSend ?? this.currentEncryptionKeyIndex;\n        const keyToSend = myKeys[keyIndexToSend];\n\n        try {\n            const content: EncryptionKeysEventContent = {\n                keys: [\n                    {\n                        index: keyIndexToSend,\n                        key: encodeUnpaddedBase64(keyToSend),\n                    },\n                ],\n                device_id: deviceId,\n                call_id: \"\",\n                sent_ts: Date.now(),\n            };\n\n            this.statistics.counters.roomEventEncryptionKeysSent += 1;\n\n            await this.client.sendEvent(this.room.roomId, EventType.CallEncryptionKeysPrefix, content);\n\n            logger.debug(\n                `Embedded-E2EE-LOG updateEncryptionKeyEvent participantId=${userId}:${deviceId} numKeys=${myKeys.length} currentKeyIndex=${this.currentEncryptionKeyIndex} keyIndexToSend=${keyIndexToSend}`,\n                this.encryptionKeys,\n            );\n        } catch (error) {\n            const matrixError = error as MatrixError;\n            if (matrixError.event) {\n                // cancel the pending event: we'll just generate a new one with our latest\n                // keys when we resend\n                this.client.cancelPendingEvent(matrixError.event);\n            }\n            if (this.keysEventUpdateTimeout === undefined) {\n                const resendDelay = safeGetRetryAfterMs(matrixError, 5000);\n                logger.warn(`Failed to send m.call.encryption_key, retrying in ${resendDelay}`, error);\n                this.keysEventUpdateTimeout = setTimeout(() => void this.sendEncryptionKeysEvent(), resendDelay);\n            } else {\n                logger.info(\"Not scheduling key resend as another re-send is already pending\");\n            }\n        }\n    };\n\n    public onCallEncryptionEventReceived = (event: MatrixEvent): void => {\n        const userId = event.getSender();\n        const content = event.getContent<EncryptionKeysEventContent>();\n\n        const deviceId = content[\"device_id\"];\n        const callId = content[\"call_id\"];\n\n        if (!userId) {\n            logger.warn(`Received m.call.encryption_keys with no userId: callId=${callId}`);\n            return;\n        }\n\n        // We currently only handle callId = \"\" (which is the default for room scoped calls)\n        if (callId !== \"\") {\n            logger.warn(\n                `Received m.call.encryption_keys with unsupported callId: userId=${userId}, deviceId=${deviceId}, callId=${callId}`,\n            );\n            return;\n        }\n\n        if (!Array.isArray(content.keys)) {\n            logger.warn(`Received m.call.encryption_keys where keys wasn't an array: callId=${callId}`);\n            return;\n        }\n\n        if (userId === this.client.getUserId() && deviceId === this.client.getDeviceId()) {\n            // We store our own sender key in the same set along with keys from others, so it's\n            // important we don't allow our own keys to be set by one of these events (apart from\n            // the fact that we don't need it anyway because we already know our own keys).\n            logger.info(\"Ignoring our own keys event\");\n            return;\n        }\n\n        this.statistics.counters.roomEventEncryptionKeysReceived += 1;\n        const age = Date.now() - (typeof content.sent_ts === \"number\" ? content.sent_ts : event.getTs());\n        this.statistics.totals.roomEventEncryptionKeysReceivedTotalAge += age;\n\n        for (const key of content.keys) {\n            if (!key) {\n                logger.info(\"Ignoring false-y key in keys event\");\n                continue;\n            }\n\n            const encryptionKey = key.key;\n            const encryptionKeyIndex = key.index;\n\n            if (\n                !encryptionKey ||\n                encryptionKeyIndex === undefined ||\n                encryptionKeyIndex === null ||\n                callId === undefined ||\n                callId === null ||\n                typeof deviceId !== \"string\" ||\n                typeof callId !== \"string\" ||\n                typeof encryptionKey !== \"string\" ||\n                typeof encryptionKeyIndex !== \"number\"\n            ) {\n                logger.warn(\n                    `Malformed call encryption_key: userId=${userId}, deviceId=${deviceId}, encryptionKeyIndex=${encryptionKeyIndex} callId=${callId}`,\n                );\n            } else {\n                logger.debug(\n                    `Embedded-E2EE-LOG onCallEncryption userId=${userId}:${deviceId} encryptionKeyIndex=${encryptionKeyIndex} age=${age}ms`,\n                    this.encryptionKeys,\n                );\n                this.setEncryptionKey(userId, deviceId, encryptionKeyIndex, encryptionKey, event.getTs());\n            }\n        }\n    };\n    private storeLastMembershipFingerprints(): void {\n        this.lastMembershipFingerprints = new Set(\n            this.getMemberships()\n                .filter((m) => !this.isMyMembership(m))\n                .map((m) => `${getParticipantIdFromMembership(m)}:${m.createdTs()}`),\n        );\n    }\n\n    private getNewEncryptionKeyIndex(): number {\n        if (this.currentEncryptionKeyIndex === -1) {\n            return 0;\n        }\n\n        // maximum key index is 255\n        return (this.currentEncryptionKeyIndex + 1) % 256;\n    }\n\n    /**\n     * Sets an encryption key at a specified index for a participant.\n     * The encryption keys for the local participant are also stored here under the\n     * user and device ID of the local participant.\n     * If the key is older than the existing key at the index, it will be ignored.\n     * @param userId - The user ID of the participant\n     * @param deviceId - Device ID of the participant\n     * @param encryptionKeyIndex - The index of the key to set\n     * @param encryptionKeyString - The string representation of the key to set in base64\n     * @param timestamp - The timestamp of the key. We assume that these are monotonic for each participant device.\n     * @param delayBeforeUse - If true, delay before emitting a key changed event. Useful when setting\n     *                         encryption keys for the local participant to allow time for the key to\n     *                         be distributed.\n     */\n    private setEncryptionKey(\n        userId: string,\n        deviceId: string,\n        encryptionKeyIndex: number,\n        encryptionKeyString: string,\n        timestamp: number,\n        delayBeforeUse = false,\n    ): void {\n        const keyBin = decodeBase64(encryptionKeyString);\n\n        const participantId = getParticipantId(userId, deviceId);\n        if (!this.encryptionKeys.has(participantId)) {\n            this.encryptionKeys.set(participantId, []);\n        }\n        const participantKeys = this.encryptionKeys.get(participantId)!;\n\n        const existingKeyAtIndex = participantKeys[encryptionKeyIndex];\n\n        if (existingKeyAtIndex) {\n            if (existingKeyAtIndex.timestamp > timestamp) {\n                logger.info(\n                    `Ignoring new key at index ${encryptionKeyIndex} for ${participantId} as it is older than existing known key`,\n                );\n                return;\n            }\n\n            if (keysEqual(existingKeyAtIndex.key, keyBin)) {\n                existingKeyAtIndex.timestamp = timestamp;\n                return;\n            }\n        }\n\n        participantKeys[encryptionKeyIndex] = {\n            key: keyBin,\n            timestamp,\n        };\n\n        if (delayBeforeUse) {\n            const useKeyTimeout = setTimeout(() => {\n                this.setNewKeyTimeouts.delete(useKeyTimeout);\n                logger.info(`Delayed-emitting key changed event for ${participantId} idx ${encryptionKeyIndex}`);\n                if (userId === this.client.getUserId() && deviceId === this.client.getDeviceId()) {\n                    this.currentEncryptionKeyIndex = encryptionKeyIndex;\n                }\n                this.onEncryptionKeysChanged(keyBin, encryptionKeyIndex, participantId);\n            }, this.useKeyDelay);\n            this.setNewKeyTimeouts.add(useKeyTimeout);\n        } else {\n            if (userId === this.client.getUserId() && deviceId === this.client.getDeviceId()) {\n                this.currentEncryptionKeyIndex = encryptionKeyIndex;\n            }\n            this.onEncryptionKeysChanged(keyBin, encryptionKeyIndex, participantId);\n        }\n    }\n\n    private onRotateKeyTimeout = (): void => {\n        if (!this.manageMediaKeys) return;\n\n        this.makeNewKeyTimeout = undefined;\n        logger.info(\"Making new sender key for key rotation\");\n        const newKeyIndex = this.makeNewSenderKey(true);\n        // send immediately: if we're about to start sending with a new key, it's\n        // important we get it out to others as soon as we can.\n        void this.sendEncryptionKeysEvent(newKeyIndex);\n    };\n}\n\nconst getParticipantId = (userId: string, deviceId: string): string => `${userId}:${deviceId}`;\nfunction keysEqual(a: Uint8Array | undefined, b: Uint8Array | undefined): boolean {\n    if (a === b) return true;\n    return !!a && !!b && a.length === b.length && a.every((x, i) => x === b[i]);\n}\nconst getParticipantIdFromMembership = (m: CallMembership): string => getParticipantId(m.sender!, m.deviceId);\n"],"mappings":";;AACA,SAASA,MAAM,IAAIC,UAAU,QAAQ,cAAc;AAInD,SAASC,qBAAqB,QAAQ,oBAAoB;AAE1D,SAASC,YAAY,EAAEC,oBAAoB,QAAQ,cAAc;AACjE,SAA2BC,mBAAmB,QAAQ,uBAAuB;AAE7E,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,IAAMN,MAAM,GAAGC,UAAU,CAACM,QAAQ,CAAC,kBAAkB,CAAC;;AAEtD;AACA;AACA;;AAqBA;AACA;AACA;AACA;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,CAA+B;EAMzD,IAAYC,2BAA2BA,CAAA,EAAW;IAAA,IAAAC,qBAAA,EAAAC,gBAAA;IAC9C,QAAAD,qBAAA,IAAAC,gBAAA,GAAO,IAAI,CAACC,UAAU,cAAAD,gBAAA,uBAAfA,gBAAA,CAAiBF,2BAA2B,cAAAC,qBAAA,cAAAA,qBAAA,GAAI,IAAK;EAChE;EACA,IAAYG,YAAYA,CAAA,EAAW;IAAA,IAAAC,qBAAA,EAAAC,iBAAA;IAC/B,QAAAD,qBAAA,IAAAC,iBAAA,GAAO,IAAI,CAACH,UAAU,cAAAG,iBAAA,uBAAfA,iBAAA,CAAiBF,YAAY,cAAAC,qBAAA,cAAAA,qBAAA,GAAI,IAAK;EACjD;EACA,IAAYE,WAAWA,CAAA,EAAW;IAAA,IAAAC,qBAAA,EAAAC,iBAAA;IAC9B,QAAAD,qBAAA,IAAAC,iBAAA,GAAO,IAAI,CAACN,UAAU,cAAAM,iBAAA,uBAAfA,iBAAA,CAAiBF,WAAW,cAAAC,qBAAA,cAAAA,qBAAA,GAAI,IAAK;EAChD;EAsBOE,WAAWA,CACNC,MAA4F,EAC5FC,IAA0B,EAC1BC,cAAsC,EACtCC,uBAIC,EACX;IAAA,IAAAC,KAAA;IAAA,KARUJ,MAA4F,GAA5FA,MAA4F;IAAA,KAC5FC,IAA0B,GAA1BA,IAA0B;IAAA,KAC1BC,cAAsC,GAAtCA,cAAsC;IAAA,KACtCC,uBAIC,GAJDA,uBAIC;IAAAE,eAAA,0BA3Ca,KAAK;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA,4BAGH,IAAIC,GAAG,CAAgC,CAAC;IAAAD,eAAA,yBAY3C,IAAIE,GAAG,CAAwD,CAAC;IAAAF,eAAA;IAGzF;IACA;IAAAA,eAAA;IAAAA,eAAA,oCAGoC,CAAC,CAAC;IAAAA,eAAA,qBAEN;MAC5BG,QAAQ,EAAE;QACNC,2BAA2B,EAAE,CAAC;QAC9BC,+BAA+B,EAAE;MACrC,CAAC;MACDC,MAAM,EAAE;QACJC,uCAAuC,EAAE;MAC7C;IACJ,CAAC;IAAAP,eAAA;IAAAA,eAAA,iBAiBgB,KAAK;IAkCtB;IAAAA,eAAA,yBAC0BQ,CAAiB,IACvCA,CAAC,CAACC,MAAM,KAAK,IAAI,CAACd,MAAM,CAACe,SAAS,CAAC,CAAC,IAAIF,CAAC,CAACG,QAAQ,KAAK,IAAI,CAAChB,MAAM,CAACiB,WAAW,CAAC,CAAC;IAwGpF;AACJ;AACA;IAFIZ,eAAA;MAAA,IAAAa,IAAA,GAAAC,iBAAA,CAGkC,WAAOC,WAAoB,EAAoB;QAC7E,IAAIhB,KAAI,CAACiB,sBAAsB,KAAKC,SAAS,EAAE;UAC3CC,YAAY,CAACnB,KAAI,CAACiB,sBAAsB,CAAC;UACzCjB,KAAI,CAACiB,sBAAsB,GAAGC,SAAS;QAC3C;QACAlB,KAAI,CAACoB,8BAA8B,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;QAEhD,IAAI,CAACtB,KAAI,CAACuB,MAAM,EAAE;QAElB/C,MAAM,CAACgD,IAAI,+CAAAC,MAAA,CAA+CT,WAAW,CAAE,CAAC;QAExE,IAAMU,MAAM,GAAG1B,KAAI,CAACJ,MAAM,CAACe,SAAS,CAAC,CAAC;QACtC,IAAMC,QAAQ,GAAGZ,KAAI,CAACJ,MAAM,CAACiB,WAAW,CAAC,CAAC;QAE1C,IAAI,CAACa,MAAM,EAAE,MAAM,IAAIC,KAAK,CAAC,WAAW,CAAC;QACzC,IAAI,CAACf,QAAQ,EAAE,MAAM,IAAIe,KAAK,CAAC,aAAa,CAAC;QAE7C,IAAMC,MAAM,GAAG5B,KAAI,CAAC6B,qBAAqB,CAACH,MAAM,EAAEd,QAAQ,CAAC;QAE3D,IAAI,CAACgB,MAAM,EAAE;UACTpD,MAAM,CAACsD,IAAI,CAAC,wDAAwD,CAAC;UACrE;QACJ;QAEA,IAAI,OAAOd,WAAW,KAAK,QAAQ,IAAIhB,KAAI,CAAC+B,yBAAyB,KAAK,CAAC,CAAC,EAAE;UAC1EvD,MAAM,CAACsD,IAAI,CAAC,qEAAqE,CAAC;UAClF;QACJ;QAEA,IAAME,cAAc,GAAGhB,WAAW,aAAXA,WAAW,cAAXA,WAAW,GAAIhB,KAAI,CAAC+B,yBAAyB;QACpE,IAAME,SAAS,GAAGL,MAAM,CAACI,cAAc,CAAC;QAExC,IAAI;UACA,IAAME,OAAmC,GAAG;YACxCC,IAAI,EAAE,CACF;cACIC,KAAK,EAAEJ,cAAc;cACrBK,GAAG,EAAEzD,oBAAoB,CAACqD,SAAS;YACvC,CAAC,CACJ;YACDK,SAAS,EAAE1B,QAAQ;YACnB2B,OAAO,EAAE,EAAE;YACXC,OAAO,EAAEnB,IAAI,CAACC,GAAG,CAAC;UACtB,CAAC;UAEDtB,KAAI,CAACyC,UAAU,CAACrC,QAAQ,CAACC,2BAA2B,IAAI,CAAC;UAEzD,MAAML,KAAI,CAACJ,MAAM,CAAC8C,SAAS,CAAC1C,KAAI,CAACH,IAAI,CAAC8C,MAAM,EAAE7D,SAAS,CAAC8D,wBAAwB,EAAEV,OAAO,CAAC;UAE1F1D,MAAM,CAACqE,KAAK,6DAAApB,MAAA,CACoDC,MAAM,OAAAD,MAAA,CAAIb,QAAQ,eAAAa,MAAA,CAAYG,MAAM,CAACkB,MAAM,uBAAArB,MAAA,CAAoBzB,KAAI,CAAC+B,yBAAyB,sBAAAN,MAAA,CAAmBO,cAAc,GAC1LhC,KAAI,CAAC+C,cACT,CAAC;QACL,CAAC,CAAC,OAAOC,KAAK,EAAE;UACZ,IAAMC,WAAW,GAAGD,KAAoB;UACxC,IAAIC,WAAW,CAACC,KAAK,EAAE;YACnB;YACA;YACAlD,KAAI,CAACJ,MAAM,CAACuD,kBAAkB,CAACF,WAAW,CAACC,KAAK,CAAC;UACrD;UACA,IAAIlD,KAAI,CAACiB,sBAAsB,KAAKC,SAAS,EAAE;YAC3C,IAAMkC,WAAW,GAAGvE,mBAAmB,CAACoE,WAAW,EAAE,IAAI,CAAC;YAC1DzE,MAAM,CAACsD,IAAI,sDAAAL,MAAA,CAAsD2B,WAAW,GAAIJ,KAAK,CAAC;YACtFhD,KAAI,CAACiB,sBAAsB,GAAGoC,UAAU,CAAC,MAAM,KAAKrD,KAAI,CAACsD,uBAAuB,CAAC,CAAC,EAAEF,WAAW,CAAC;UACpG,CAAC,MAAM;YACH5E,MAAM,CAACgD,IAAI,CAAC,iEAAiE,CAAC;UAClF;QACJ;MACJ,CAAC;MAAA,iBAAA+B,EAAA;QAAA,OAAAzC,IAAA,CAAA0C,KAAA,OAAAC,SAAA;MAAA;IAAA;IAAAxD,eAAA,wCAEuCiD,KAAkB,IAAW;MACjE,IAAMxB,MAAM,GAAGwB,KAAK,CAACQ,SAAS,CAAC,CAAC;MAChC,IAAMxB,OAAO,GAAGgB,KAAK,CAACS,UAAU,CAA6B,CAAC;MAE9D,IAAM/C,QAAQ,GAAGsB,OAAO,CAAC,WAAW,CAAC;MACrC,IAAM0B,MAAM,GAAG1B,OAAO,CAAC,SAAS,CAAC;MAEjC,IAAI,CAACR,MAAM,EAAE;QACTlD,MAAM,CAACsD,IAAI,2DAAAL,MAAA,CAA2DmC,MAAM,CAAE,CAAC;QAC/E;MACJ;;MAEA;MACA,IAAIA,MAAM,KAAK,EAAE,EAAE;QACfpF,MAAM,CAACsD,IAAI,oEAAAL,MAAA,CAC4DC,MAAM,iBAAAD,MAAA,CAAcb,QAAQ,eAAAa,MAAA,CAAYmC,MAAM,CACrH,CAAC;QACD;MACJ;MAEA,IAAI,CAACC,KAAK,CAACC,OAAO,CAAC5B,OAAO,CAACC,IAAI,CAAC,EAAE;QAC9B3D,MAAM,CAACsD,IAAI,uEAAAL,MAAA,CAAuEmC,MAAM,CAAE,CAAC;QAC3F;MACJ;MAEA,IAAIlC,MAAM,KAAK,IAAI,CAAC9B,MAAM,CAACe,SAAS,CAAC,CAAC,IAAIC,QAAQ,KAAK,IAAI,CAAChB,MAAM,CAACiB,WAAW,CAAC,CAAC,EAAE;QAC9E;QACA;QACA;QACArC,MAAM,CAACgD,IAAI,CAAC,6BAA6B,CAAC;QAC1C;MACJ;MAEA,IAAI,CAACiB,UAAU,CAACrC,QAAQ,CAACE,+BAA+B,IAAI,CAAC;MAC7D,IAAMyD,GAAG,GAAG1C,IAAI,CAACC,GAAG,CAAC,CAAC,IAAI,OAAOY,OAAO,CAACM,OAAO,KAAK,QAAQ,GAAGN,OAAO,CAACM,OAAO,GAAGU,KAAK,CAACc,KAAK,CAAC,CAAC,CAAC;MAChG,IAAI,CAACvB,UAAU,CAAClC,MAAM,CAACC,uCAAuC,IAAIuD,GAAG;MAErE,KAAK,IAAM1B,GAAG,IAAIH,OAAO,CAACC,IAAI,EAAE;QAC5B,IAAI,CAACE,GAAG,EAAE;UACN7D,MAAM,CAACgD,IAAI,CAAC,oCAAoC,CAAC;UACjD;QACJ;QAEA,IAAMyC,aAAa,GAAG5B,GAAG,CAACA,GAAG;QAC7B,IAAM6B,kBAAkB,GAAG7B,GAAG,CAACD,KAAK;QAEpC,IACI,CAAC6B,aAAa,IACdC,kBAAkB,KAAKhD,SAAS,IAChCgD,kBAAkB,KAAK,IAAI,IAC3BN,MAAM,KAAK1C,SAAS,IACpB0C,MAAM,KAAK,IAAI,IACf,OAAOhD,QAAQ,KAAK,QAAQ,IAC5B,OAAOgD,MAAM,KAAK,QAAQ,IAC1B,OAAOK,aAAa,KAAK,QAAQ,IACjC,OAAOC,kBAAkB,KAAK,QAAQ,EACxC;UACE1F,MAAM,CAACsD,IAAI,0CAAAL,MAAA,CACkCC,MAAM,iBAAAD,MAAA,CAAcb,QAAQ,2BAAAa,MAAA,CAAwByC,kBAAkB,cAAAzC,MAAA,CAAWmC,MAAM,CACpI,CAAC;QACL,CAAC,MAAM;UACHpF,MAAM,CAACqE,KAAK,8CAAApB,MAAA,CACqCC,MAAM,OAAAD,MAAA,CAAIb,QAAQ,0BAAAa,MAAA,CAAuByC,kBAAkB,WAAAzC,MAAA,CAAQsC,GAAG,SACnH,IAAI,CAAChB,cACT,CAAC;UACD,IAAI,CAACoB,gBAAgB,CAACzC,MAAM,EAAEd,QAAQ,EAAEsD,kBAAkB,EAAED,aAAa,EAAEf,KAAK,CAACc,KAAK,CAAC,CAAC,CAAC;QAC7F;MACJ;IACJ,CAAC;IAAA/D,eAAA,6BAuF4B,MAAY;MACrC,IAAI,CAAC,IAAI,CAACmE,eAAe,EAAE;MAE3B,IAAI,CAACC,iBAAiB,GAAGnD,SAAS;MAClC1C,MAAM,CAACgD,IAAI,CAAC,wCAAwC,CAAC;MACrD,IAAM8C,WAAW,GAAG,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAAC;MAC/C;MACA;MACA,KAAK,IAAI,CAACjB,uBAAuB,CAACgB,WAAW,CAAC;IAClD,CAAC;EA9XE;EAEIE,iBAAiBA,CAAA,EAA+D;IACnF,OAAO,IAAI,CAACzB,cAAc;EAC9B;EAEO0B,IAAIA,CAACrF,UAA4B,EAAQ;IAAA,IAAAsF,qBAAA,EAAAC,iBAAA,EAAAC,iBAAA;IAC5C,IAAI,CAACxF,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACmC,MAAM,GAAG,IAAI;IAClB,IAAI,CAAC6C,eAAe,IAAAM,qBAAA,IAAAC,iBAAA,GAAG,IAAI,CAACvF,UAAU,cAAAuF,iBAAA,uBAAfA,iBAAA,CAAiBP,eAAe,cAAAM,qBAAA,cAAAA,qBAAA,GAAI,IAAI,CAACN,eAAe;IAC/E,KAAAQ,iBAAA,GAAI,IAAI,CAACxF,UAAU,cAAAwF,iBAAA,eAAfA,iBAAA,CAAiBR,eAAe,EAAE;MAClC,IAAI,CAACG,gBAAgB,CAAC,CAAC;MACvB,IAAI,CAACM,qBAAqB,CAAC,CAAC;IAChC;EACJ;EAEOC,KAAKA,CAAA,EAAS;IACjB,IAAMpD,MAAM,GAAG,IAAI,CAAC9B,MAAM,CAACe,SAAS,CAAC,CAAC;IACtC,IAAMC,QAAQ,GAAG,IAAI,CAAChB,MAAM,CAACiB,WAAW,CAAC,CAAC;IAE1C,IAAI,CAACa,MAAM,EAAE,MAAM,IAAIC,KAAK,CAAC,WAAW,CAAC;IACzC,IAAI,CAACf,QAAQ,EAAE,MAAM,IAAIe,KAAK,CAAC,aAAa,CAAC;IAC7C;IACA;IACA;IACA,IAAI,CAACoB,cAAc,CAACgC,GAAG,CAACC,gBAAgB,CAACtD,MAAM,EAAEd,QAAQ,CAAC,EAAE,EAAE,CAAC;IAE/D,IAAI,IAAI,CAACyD,iBAAiB,KAAKnD,SAAS,EAAE;MACtCC,YAAY,CAAC,IAAI,CAACkD,iBAAiB,CAAC;MACpC,IAAI,CAACA,iBAAiB,GAAGnD,SAAS;IACtC;IACA,KAAK,IAAM+D,CAAC,IAAI,IAAI,CAACC,iBAAiB,EAAE;MACpC/D,YAAY,CAAC8D,CAAC,CAAC;IACnB;IACA,IAAI,CAACC,iBAAiB,CAACC,KAAK,CAAC,CAAC;IAE9B,IAAI,CAACf,eAAe,GAAG,KAAK;IAC5B,IAAI,CAAC7C,MAAM,GAAG,KAAK;EACvB;EAKO6D,mBAAmBA,CAACC,cAAgC,EAAQ;IAC/D,IAAI,IAAI,CAACjB,eAAe,IAAI,IAAI,CAAC7C,MAAM,EAAE;MACrC,IAAM+D,gBAAgB,GAAG,IAAIpF,GAAG,CAC5BmF,cAAc,CAACE,MAAM,CAAE9E,CAAC,IAAK,CAAC,IAAI,CAAC+E,cAAc,CAAC/E,CAAC,CAAC,CAAC,CAACgF,GAAG,CAACC,8BAA8B,CAC5F,CAAC;MACD,IAAMC,gBAAgB,GAAG,IAAIzF,GAAG,CAC5B,IAAI,CAACJ,cAAc,CAAC,CAAC,CAChByF,MAAM,CAAE9E,CAAC,IAAK,CAAC,IAAI,CAAC+E,cAAc,CAAC/E,CAAC,CAAC,CAAC,CACtCgF,GAAG,CAACC,8BAA8B,CAC3C,CAAC;;MAED;MACA;MACA,IAAME,OAAO,GAAG/B,KAAK,CAACgC,IAAI,CAACP,gBAAgB,CAAC,CAACQ,IAAI,CAAEC,CAAC,IAAK,CAACJ,gBAAgB,CAACK,GAAG,CAACD,CAAC,CAAC,CAAC;MAClF,IAAME,SAAS,GAAGpC,KAAK,CAACgC,IAAI,CAACF,gBAAgB,CAAC,CAACG,IAAI,CAAEC,CAAC,IAAK,CAACT,gBAAgB,CAACU,GAAG,CAACD,CAAC,CAAC,CAAC;MAEpF,IAAMG,eAAe,GAAG,IAAI,CAACC,0BAA0B;MACvD;MACA,IAAI,CAACC,+BAA+B,CAAC,CAAC;MAEtC,IAAIR,OAAO,EAAE;QACT,IAAI,IAAI,CAACvB,iBAAiB,EAAE;UACxB;QAAA,CACH,MAAM;UACH7F,MAAM,CAACqE,KAAK,oDAAoD,CAAC;UACjE,IAAI,CAACwB,iBAAiB,GAAGhB,UAAU,CAAC,IAAI,CAACgD,kBAAkB,EAAE,IAAI,CAAChH,YAAY,CAAC;QACnF;MACJ,CAAC,MAAM,IAAI4G,SAAS,EAAE;QAClBzH,MAAM,CAACqE,KAAK,6CAA6C,CAAC;QAC1D,IAAI,CAACgC,qBAAqB,CAAC,CAAC;MAChC,CAAC,MAAM,IAAIqB,eAAe,EAAE;QACxB;QACA,IAAMI,eAAe,GAAG,IAAI,CAACH,0BAA2B;;QAExD;QACA;QACA,IAAMI,gBAAgB,GAClB1C,KAAK,CAACgC,IAAI,CAACK,eAAe,CAAC,CAACJ,IAAI,CAAEC,CAAC,IAAK,CAACO,eAAe,CAACN,GAAG,CAACD,CAAC,CAAC,CAAC,IAChElC,KAAK,CAACgC,IAAI,CAACS,eAAe,CAAC,CAACR,IAAI,CAAEC,CAAC,IAAK,CAACG,eAAe,CAACF,GAAG,CAACD,CAAC,CAAC,CAAC;QACpE,IAAIQ,gBAAgB,EAAE;UAClB/H,MAAM,CAACqE,KAAK,kEAAkE,CAAC;UAC/E,IAAI,CAACgC,qBAAqB,CAAC,CAAC;QAChC;MACJ;IACJ;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACYN,gBAAgBA,CAAA,EAAiC;IAAA,IAAhCiC,cAAc,GAAA/C,SAAA,CAAAX,MAAA,QAAAW,SAAA,QAAAvC,SAAA,GAAAuC,SAAA,MAAG,KAAK;IAC3C,IAAM/B,MAAM,GAAG,IAAI,CAAC9B,MAAM,CAACe,SAAS,CAAC,CAAC;IACtC,IAAMC,QAAQ,GAAG,IAAI,CAAChB,MAAM,CAACiB,WAAW,CAAC,CAAC;IAE1C,IAAI,CAACa,MAAM,EAAE,MAAM,IAAIC,KAAK,CAAC,WAAW,CAAC;IACzC,IAAI,CAACf,QAAQ,EAAE,MAAM,IAAIe,KAAK,CAAC,aAAa,CAAC;IAE7C,IAAMsC,aAAa,GAAGvF,qBAAqB,CAAC,EAAE,CAAC;IAC/C,IAAMwF,kBAAkB,GAAG,IAAI,CAACuC,wBAAwB,CAAC,CAAC;IAC1DjI,MAAM,CAACgD,IAAI,CAAC,6BAA6B,GAAG0C,kBAAkB,CAAC;IAC/D,IAAI,CAACC,gBAAgB,CAACzC,MAAM,EAAEd,QAAQ,EAAEsD,kBAAkB,EAAED,aAAa,EAAE5C,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEkF,cAAc,CAAC;IACtG,OAAOtC,kBAAkB;EAC7B;;EAEA;AACJ;AACA;AACA;EACYW,qBAAqBA,CAAA,EAAS;IAClC,IAAI,CAAC,IAAI,CAACT,eAAe,EAAE;IAE3B,IACI,IAAI,CAAChD,8BAA8B,IACnC,IAAI,CAACA,8BAA8B,GAAG,IAAI,CAACnC,2BAA2B,GAAGoC,IAAI,CAACC,GAAG,CAAC,CAAC,EACrF;MACE9C,MAAM,CAACgD,IAAI,CAAC,yDAAyD,CAAC;MACtE,IAAI,IAAI,CAACP,sBAAsB,KAAKC,SAAS,EAAE;QAC3C,IAAI,CAACD,sBAAsB,GAAGoC,UAAU,CACpC,MAAM,KAAK,IAAI,CAACC,uBAAuB,CAAC,CAAC,EACzC,IAAI,CAACrE,2BACT,CAAC;MACL;MACA;IACJ;IAEA,KAAK,IAAI,CAACqE,uBAAuB,CAAC,CAAC;EACvC;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACYzB,qBAAqBA,CAACH,MAAc,EAAEd,QAAgB,EAAiC;IAAA,IAAA8F,qBAAA;IAC3F,QAAAA,qBAAA,GAAO,IAAI,CAAC3D,cAAc,CAAC4D,GAAG,CAAC3B,gBAAgB,CAACtD,MAAM,EAAEd,QAAQ,CAAC,CAAC,cAAA8F,qBAAA,uBAA3DA,qBAAA,CAA6DjB,GAAG,CAAEmB,KAAK,IAAKA,KAAK,CAACvE,GAAG,CAAC;EACjG;EAgJQ+D,+BAA+BA,CAAA,EAAS;IAC5C,IAAI,CAACD,0BAA0B,GAAG,IAAIjG,GAAG,CACrC,IAAI,CAACJ,cAAc,CAAC,CAAC,CAChByF,MAAM,CAAE9E,CAAC,IAAK,CAAC,IAAI,CAAC+E,cAAc,CAAC/E,CAAC,CAAC,CAAC,CACtCgF,GAAG,CAAEhF,CAAC,OAAAgB,MAAA,CAAQiE,8BAA8B,CAACjF,CAAC,CAAC,OAAAgB,MAAA,CAAIhB,CAAC,CAACoG,SAAS,CAAC,CAAC,CAAE,CAC3E,CAAC;EACL;EAEQJ,wBAAwBA,CAAA,EAAW;IACvC,IAAI,IAAI,CAAC1E,yBAAyB,KAAK,CAAC,CAAC,EAAE;MACvC,OAAO,CAAC;IACZ;;IAEA;IACA,OAAO,CAAC,IAAI,CAACA,yBAAyB,GAAG,CAAC,IAAI,GAAG;EACrD;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACYoC,gBAAgBA,CACpBzC,MAAc,EACdd,QAAgB,EAChBsD,kBAA0B,EAC1B4C,mBAA2B,EAC3BC,SAAiB,EAEb;IAAA,IADJP,cAAc,GAAA/C,SAAA,CAAAX,MAAA,QAAAW,SAAA,QAAAvC,SAAA,GAAAuC,SAAA,MAAG,KAAK;IAEtB,IAAMuD,MAAM,GAAGrI,YAAY,CAACmI,mBAAmB,CAAC;IAEhD,IAAMG,aAAa,GAAGjC,gBAAgB,CAACtD,MAAM,EAAEd,QAAQ,CAAC;IACxD,IAAI,CAAC,IAAI,CAACmC,cAAc,CAACiD,GAAG,CAACiB,aAAa,CAAC,EAAE;MACzC,IAAI,CAAClE,cAAc,CAACgC,GAAG,CAACkC,aAAa,EAAE,EAAE,CAAC;IAC9C;IACA,IAAMC,eAAe,GAAG,IAAI,CAACnE,cAAc,CAAC4D,GAAG,CAACM,aAAa,CAAE;IAE/D,IAAME,kBAAkB,GAAGD,eAAe,CAAChD,kBAAkB,CAAC;IAE9D,IAAIiD,kBAAkB,EAAE;MACpB,IAAIA,kBAAkB,CAACJ,SAAS,GAAGA,SAAS,EAAE;QAC1CvI,MAAM,CAACgD,IAAI,8BAAAC,MAAA,CACsByC,kBAAkB,WAAAzC,MAAA,CAAQwF,aAAa,4CACxE,CAAC;QACD;MACJ;MAEA,IAAIG,SAAS,CAACD,kBAAkB,CAAC9E,GAAG,EAAE2E,MAAM,CAAC,EAAE;QAC3CG,kBAAkB,CAACJ,SAAS,GAAGA,SAAS;QACxC;MACJ;IACJ;IAEAG,eAAe,CAAChD,kBAAkB,CAAC,GAAG;MAClC7B,GAAG,EAAE2E,MAAM;MACXD;IACJ,CAAC;IAED,IAAIP,cAAc,EAAE;MAChB,IAAMa,aAAa,GAAGhE,UAAU,CAAC,MAAM;QACnC,IAAI,CAAC6B,iBAAiB,CAACoC,MAAM,CAACD,aAAa,CAAC;QAC5C7I,MAAM,CAACgD,IAAI,2CAAAC,MAAA,CAA2CwF,aAAa,WAAAxF,MAAA,CAAQyC,kBAAkB,CAAE,CAAC;QAChG,IAAIxC,MAAM,KAAK,IAAI,CAAC9B,MAAM,CAACe,SAAS,CAAC,CAAC,IAAIC,QAAQ,KAAK,IAAI,CAAChB,MAAM,CAACiB,WAAW,CAAC,CAAC,EAAE;UAC9E,IAAI,CAACkB,yBAAyB,GAAGmC,kBAAkB;QACvD;QACA,IAAI,CAACnE,uBAAuB,CAACiH,MAAM,EAAE9C,kBAAkB,EAAE+C,aAAa,CAAC;MAC3E,CAAC,EAAE,IAAI,CAACzH,WAAW,CAAC;MACpB,IAAI,CAAC0F,iBAAiB,CAACqC,GAAG,CAACF,aAAa,CAAC;IAC7C,CAAC,MAAM;MACH,IAAI3F,MAAM,KAAK,IAAI,CAAC9B,MAAM,CAACe,SAAS,CAAC,CAAC,IAAIC,QAAQ,KAAK,IAAI,CAAChB,MAAM,CAACiB,WAAW,CAAC,CAAC,EAAE;QAC9E,IAAI,CAACkB,yBAAyB,GAAGmC,kBAAkB;MACvD;MACA,IAAI,CAACnE,uBAAuB,CAACiH,MAAM,EAAE9C,kBAAkB,EAAE+C,aAAa,CAAC;IAC3E;EACJ;AAYJ;AAEA,IAAMjC,gBAAgB,GAAGA,CAACtD,MAAc,EAAEd,QAAgB,QAAAa,MAAA,CAAgBC,MAAM,OAAAD,MAAA,CAAIb,QAAQ,CAAE;AAC9F,SAASwG,SAASA,CAACI,CAAyB,EAAEC,CAAyB,EAAW;EAC9E,IAAID,CAAC,KAAKC,CAAC,EAAE,OAAO,IAAI;EACxB,OAAO,CAAC,CAACD,CAAC,IAAI,CAAC,CAACC,CAAC,IAAID,CAAC,CAAC1E,MAAM,KAAK2E,CAAC,CAAC3E,MAAM,IAAI0E,CAAC,CAACE,KAAK,CAAC,CAAC3B,CAAC,EAAE4B,CAAC,KAAK5B,CAAC,KAAK0B,CAAC,CAACE,CAAC,CAAC,CAAC;AAC/E;AACA,IAAMjC,8BAA8B,GAAIjF,CAAiB,IAAauE,gBAAgB,CAACvE,CAAC,CAACC,MAAM,EAAGD,CAAC,CAACG,QAAQ,CAAC","ignoreList":[]}