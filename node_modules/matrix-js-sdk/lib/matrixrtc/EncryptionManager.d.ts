import { type MatrixClient } from "../client.ts";
import { type MatrixEvent } from "../models/event.ts";
import { type Room } from "../models/room.ts";
import { type EncryptionConfig } from "./MatrixRTCSession.ts";
import { type CallMembership } from "./CallMembership.ts";
/**
 * A type collecting call encryption statistics for a session.
 */
export type Statistics = {
    counters: {
        /**
         * The number of times we have sent a room event containing encryption keys.
         */
        roomEventEncryptionKeysSent: number;
        /**
         * The number of times we have received a room event containing encryption keys.
         */
        roomEventEncryptionKeysReceived: number;
    };
    totals: {
        /**
         * The total age (in milliseconds) of all room events containing encryption keys that we have received.
         * We track the total age so that we can later calculate the average age of all keys received.
         */
        roomEventEncryptionKeysReceivedTotalAge: number;
    };
};
/**
 * This interface is for testing and for making it possible to interchange the encryption manager.
 * @internal
 */
export interface IEncryptionManager {
    join(joinConfig: EncryptionConfig | undefined): void;
    leave(): void;
    onMembershipsUpdate(oldMemberships: CallMembership[]): void;
    /**
     * Process `m.call.encryption_keys` events to track the encryption keys for call participants.
     * This should be called each time the relevant event is received from a room timeline.
     * If the event is malformed then it will be logged and ignored.
     *
     * @param event the event to process
     */
    onCallEncryptionEventReceived(event: MatrixEvent): void;
    getEncryptionKeys(): Map<string, Array<{
        key: Uint8Array;
        timestamp: number;
    }>>;
    statistics: Statistics;
}
/**
 * This class implements the IEncryptionManager interface,
 * and takes care of managing the encryption keys of all rtc members:
 *  - generate new keys for the local user and send them to other participants
 *  - track all keys of all other members and update livekit.
 *
 * @internal
 */
export declare class EncryptionManager implements IEncryptionManager {
    private client;
    private room;
    private getMemberships;
    private onEncryptionKeysChanged;
    private manageMediaKeys;
    private keysEventUpdateTimeout?;
    private makeNewKeyTimeout?;
    private setNewKeyTimeouts;
    private get updateEncryptionKeyThrottle();
    private get makeKeyDelay();
    private get useKeyDelay();
    private encryptionKeys;
    private lastEncryptionKeyUpdateRequest?;
    private lastMembershipFingerprints;
    private currentEncryptionKeyIndex;
    statistics: Statistics;
    private joinConfig;
    constructor(client: Pick<MatrixClient, "sendEvent" | "getDeviceId" | "getUserId" | "cancelPendingEvent">, room: Pick<Room, "roomId">, getMemberships: () => CallMembership[], onEncryptionKeysChanged: (keyBin: Uint8Array<ArrayBufferLike>, encryptionKeyIndex: number, participantId: string) => void);
    getEncryptionKeys(): Map<string, Array<{
        key: Uint8Array;
        timestamp: number;
    }>>;
    private joined;
    join(joinConfig: EncryptionConfig): void;
    leave(): void;
    private isMyMembership;
    onMembershipsUpdate(oldMemberships: CallMembership[]): void;
    /**
     * Generate a new sender key and add it at the next available index
     * @param delayBeforeUse - If true, wait for a short period before setting the key for the
     *                         media encryptor to use. If false, set the key immediately.
     * @returns The index of the new key
     */
    private makeNewSenderKey;
    /**
     * Requests that we resend our current keys to the room. May send a keys event immediately
     * or queue for alter if one has already been sent recently.
     */
    private requestSendCurrentKey;
    /**
     * Get the known encryption keys for a given participant device.
     *
     * @param userId the user ID of the participant
     * @param deviceId the device ID of the participant
     * @returns The encryption keys for the given participant, or undefined if they are not known.
     */
    private getKeysForParticipant;
    /**
     * Re-sends the encryption keys room event
     */
    private sendEncryptionKeysEvent;
    onCallEncryptionEventReceived: (event: MatrixEvent) => void;
    private storeLastMembershipFingerprints;
    private getNewEncryptionKeyIndex;
    /**
     * Sets an encryption key at a specified index for a participant.
     * The encryption keys for the local participant are also stored here under the
     * user and device ID of the local participant.
     * If the key is older than the existing key at the index, it will be ignored.
     * @param userId - The user ID of the participant
     * @param deviceId - Device ID of the participant
     * @param encryptionKeyIndex - The index of the key to set
     * @param encryptionKeyString - The string representation of the key to set in base64
     * @param timestamp - The timestamp of the key. We assume that these are monotonic for each participant device.
     * @param delayBeforeUse - If true, delay before emitting a key changed event. Useful when setting
     *                         encryption keys for the local participant to allow time for the key to
     *                         be distributed.
     */
    private setEncryptionKey;
    private onRotateKeyTimeout;
}
//# sourceMappingURL=EncryptionManager.d.ts.map