import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
/*
Copyright 2023 The Matrix.org Foundation C.I.C.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import { logger as rootLogger } from "../logger.js";
import { ClientEvent } from "../client.js";
import { TypedEventEmitter } from "../models/typed-event-emitter.js";
import { RoomEvent } from "../models/room.js";
import { RoomStateEvent } from "../models/room-state.js";
import { MatrixRTCSession } from "./MatrixRTCSession.js";
import { EventType } from "../@types/event.js";
var logger = rootLogger.getChild("MatrixRTCSessionManager");
export var MatrixRTCSessionManagerEvents = /*#__PURE__*/function (MatrixRTCSessionManagerEvents) {
  MatrixRTCSessionManagerEvents["SessionStarted"] = "session_started";
  MatrixRTCSessionManagerEvents["SessionEnded"] = "session_ended";
  return MatrixRTCSessionManagerEvents;
}({});
/**
 * Holds all active MatrixRTC session objects and creates new ones as events arrive.
 * This interface is UNSTABLE and may change without warning.
 */
export class MatrixRTCSessionManager extends TypedEventEmitter {
  constructor(client) {
    super();
    this.client = client;
    // All the room-scoped sessions we know about. This will include any where the app
    // has queried for the MatrixRTC sessions in a room, whether it's ever had any members
    // or not). We keep a (lazily created) session object for every room to ensure that there
    // is only ever one single room session object for any given room for the lifetime of the
    // client: that way there can never be any code holding onto a stale object that is no
    // longer the correct session object for the room.
    _defineProperty(this, "roomSessions", new Map());
    _defineProperty(this, "onTimeline", event => {
      void this.consumeCallEncryptionEvent(event);
    });
    _defineProperty(this, "onRoom", room => {
      this.refreshRoom(room);
    });
    _defineProperty(this, "onRoomState", (event, _state) => {
      var room = this.client.getRoom(event.getRoomId());
      if (!room) {
        logger.error("Got room state event for unknown room ".concat(event.getRoomId(), "!"));
        return;
      }
      if (event.getType() == EventType.GroupCallMemberPrefix) {
        this.refreshRoom(room);
      }
    });
  }
  start() {
    // We shouldn't need to null-check here, but matrix-client.spec.ts mocks getRooms
    // returning nothing, and breaks tests if you change it to return an empty array :'(
    for (var room of (_this$client$getRooms = this.client.getRooms()) !== null && _this$client$getRooms !== void 0 ? _this$client$getRooms : []) {
      var _this$client$getRooms;
      var session = MatrixRTCSession.roomSessionForRoom(this.client, room);
      if (session.memberships.length > 0) {
        this.roomSessions.set(room.roomId, session);
      }
    }
    this.client.on(ClientEvent.Room, this.onRoom);
    this.client.on(RoomEvent.Timeline, this.onTimeline);
    this.client.on(RoomStateEvent.Events, this.onRoomState);
  }
  stop() {
    for (var sess of this.roomSessions.values()) {
      void sess.stop();
    }
    this.roomSessions.clear();
    this.client.off(ClientEvent.Room, this.onRoom);
    this.client.off(RoomEvent.Timeline, this.onTimeline);
    this.client.off(RoomStateEvent.Events, this.onRoomState);
  }

  /**
   * Gets the main MatrixRTC session for a room, or undefined if there is
   * no current session
   */
  getActiveRoomSession(room) {
    return this.roomSessions.get(room.roomId);
  }

  /**
   * Gets the main MatrixRTC session for a room, returning an empty session
   * if no members are currently participating
   */
  getRoomSession(room) {
    if (!this.roomSessions.has(room.roomId)) {
      this.roomSessions.set(room.roomId, MatrixRTCSession.roomSessionForRoom(this.client, room));
    }
    return this.roomSessions.get(room.roomId);
  }
  consumeCallEncryptionEvent(event) {
    var _arguments = arguments,
      _this = this;
    return _asyncToGenerator(function* () {
      var isRetry = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : false;
      yield _this.client.decryptEventIfNeeded(event);
      if (event.isDecryptionFailure()) {
        if (!isRetry) {
          logger.warn("Decryption failed for event ".concat(event.getId(), ": ").concat(event.decryptionFailureReason, " will retry once only"));
          // retry after 1 second. After this we give up.
          setTimeout(() => void _this.consumeCallEncryptionEvent(event, true), 1000);
        } else {
          logger.warn("Decryption failed for event ".concat(event.getId(), ": ").concat(event.decryptionFailureReason));
        }
        return;
      } else if (isRetry) {
        logger.info("Decryption succeeded for event ".concat(event.getId(), " after retry"));
      }
      if (event.getType() !== EventType.CallEncryptionKeysPrefix) return Promise.resolve();
      var room = _this.client.getRoom(event.getRoomId());
      if (!room) {
        logger.error("Got room state event for unknown room ".concat(event.getRoomId(), "!"));
        return Promise.resolve();
      }
      _this.getRoomSession(room).onCallEncryption(event);
    })();
  }
  refreshRoom(room) {
    var isNewSession = !this.roomSessions.has(room.roomId);
    var sess = this.getRoomSession(room);
    var wasActiveAndKnown = sess.memberships.length > 0 && !isNewSession;
    sess.onRTCSessionMemberUpdate();
    var nowActive = sess.memberships.length > 0;
    if (wasActiveAndKnown && !nowActive) {
      this.emit(MatrixRTCSessionManagerEvents.SessionEnded, room.roomId, this.roomSessions.get(room.roomId));
    } else if (!wasActiveAndKnown && nowActive) {
      this.emit(MatrixRTCSessionManagerEvents.SessionStarted, room.roomId, this.roomSessions.get(room.roomId));
    }
  }
}
//# sourceMappingURL=MatrixRTCSessionManager.js.map